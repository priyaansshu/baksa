{"ast":null,"code":"var _jsxFileName = \"/Users/priyanshumodi/Desktop/Code/React/dot/src/Room.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport \"./style.css\";\nimport { io } from \"socket.io-client\";\nimport Game from \"./Game\";\nimport Header from './Components/Header';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Route, Link, Routes } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:4000');\nexport default function (props) {\n  const [roomId, setRoomId] = useState(\"\");\n  const [shared, setShared] = useState(false);\n  const [joined, setJoined] = useState(false);\n  const [roomFull, setRoomFull] = useState(false);\n  const [playerRole, setPlayerRole] = useState(); // playerRole=1 if he created the room, else 2 if he joined one\n\n  const [roomCode, setRoomCode] = useState();\n  const [roomDoesNotExist, setRoomDoesNotExist] = useState(false);\n  const [hostGridSize, setHostGridSize] = useState();\n  socket.on(\"start-game\", () => {\n    if (playerRole == 1) toast.dismiss(roomCopiedToastId.current);\n    setJoined(true);\n  });\n  socket.off(\"room-full\").on(\"room-full\", () => {\n    toast(\"Room is full\", {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined\n    });\n    console.log(\"room is full\");\n  });\n  socket.off('room-does-not-exist').on(\"room-does-not-exist\", () => {\n    setRoomDoesNotExist(true);\n  });\n  useEffect(() => {\n    if (roomDoesNotExist) {\n      console.log(\"here\");\n      toast(\"Room does not exist\", {\n        position: \"top-right\",\n        autoClose: 1000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: true,\n        progress: undefined\n      });\n      console.log(\"Room does not exist\");\n      setRoomDoesNotExist(false);\n    }\n  }, [roomDoesNotExist]);\n  const roomCopiedToastId = useRef(null);\n\n  function idCopied() {\n    if (roomCopiedToastId != null) {\n      toast.dismiss(roomCopiedToastId.current);\n    }\n\n    roomCopiedToastId.current = toast(\"Room ID copied to clipboard\", {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined // transition: \"zoom\"\n\n    });\n  }\n\n  const generateRandomString = myLength => {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const randomArray = Array.from({\n      length: myLength\n    }, (v, k) => chars[Math.floor(Math.random() * chars.length)]);\n    const randomString = randomArray.join(\"\");\n    return randomString;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: joined ?\n    /*#__PURE__*/\n    // <Route exact path={\"/\"+playerRole==1?roomCode:roomId} element={\n    _jsxDEV(Game, {\n      gridSize: hostGridSize,\n      roomId: playerRole == 1 ? roomCode : roomId,\n      socketId: socket.id,\n      playerRole: playerRole\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this) // }/>\n    :\n    /*#__PURE__*/\n    // <Route exact path={\"/\"} element={\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        gridSize: props.gridSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), !shared ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rooms-main-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-room-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"create-room\",\n            onClick: () => {\n              setHostGridSize(props.gridSize);\n              idCopied();\n              setShared(true);\n              var tempRoomCode = generateRandomString(6);\n              setRoomCode(tempRoomCode); // console.log(tempRoomCode);\n\n              socket.emit(\"room-created\", tempRoomCode);\n              setPlayerRole(1);\n              navigator.clipboard.writeText(tempRoomCode);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"join-room-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"room-input\",\n            type: \"text\",\n            style: roomId !== \"\" ? {\n              marginRight: \"10px\"\n            } : {\n              marginRight: \"0px\"\n            },\n            onChange: e => {\n              setRoomId(e.target.value);\n            },\n            onKeyPress: e => {\n              if (e.key === \"Enter\") {\n                setPlayerRole(2);\n                socket.emit(\"joined-room\", roomId);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), roomId !== \"\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"join-room\",\n            onClick: () => {\n              setPlayerRole(2);\n              socket.emit(\"joined-room\", roomId);\n            },\n            children: \"Join\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this) : console.log(\"Enter Room Id\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), !roomFull ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"room-id-statement\",\n          children: \"Share Room ID with a friend or enter a Room ID to start the game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"room-full-statement\",\n          children: \"Room is already full\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rooms-main-container waiting-room-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"waiting-icon-container\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"room-id-container\",\n          onClick: () => {\n            idCopied();\n            navigator.clipboard.writeText(roomCode);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: roomCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"room-id-statement\",\n          children: \"Waiting for the other player to join the room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n} // <Route path = \"/\" element = {\n//     <div>\n//         <Header gridSize={props.gridSize}/>\n//         {!shared?\n//         <div className=\"rooms-main-container\">\n//             <Link to={\"/\"+roomCode} style={{textDecoration: \"none\"}}>\n//                 <div className=\"create-room-container\">\n//                     <button \n//                         className=\"create-room\" \n//                         onClick={()=>{\n//                             idCopied();\n//                             setShared(true);\n//                             var tempRoomCode = generateRandomString(6);\n//                             setRoomCode(tempRoomCode);\n//                             // console.log(tempRoomCode);\n//                             socket.emit(\"room-created\", tempRoomCode);\n//                             setPlayerRole(1)\n//                             navigator.clipboard.writeText(tempRoomCode)\n//                             }\n//                         }>    \n//                     </button>\n//                 </div>\n//             </Link>\n//             <Link to={\"/\"+roomId} style={{textDecoration: \"none\"}}>\n//                 <div className=\"join-room-container\">\n//                     <input \n//                         className=\"room-input\" \n//                         type=\"text\" \n//                         style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n//                         onChange={(e)=>{\n//                             setRoomId(e.target.value);\n//                         }} \n//                         onKeyPress={(e)=>{\n//                             if(e.key===\"Enter\"){\n//                                 setPlayerRole(2)\n//                                 socket.emit(\"joined-room\", roomId);\n//                             }\n//                         }}\n//                     />\n//                     {roomId!==\"\"?\n//                         <button className=\"join-room\"   \n//                             onClick={()=>{\n//                                 setPlayerRole(2);\n//                                 socket.emit(\"joined-room\", roomId)\n//                             }}>\n//                         Join\n//                         </button>\n//                     :null\n//                     }\n//                 </div>\n//             </Link>\n//             {!roomFull?\n//                 <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n//             :\n//                 <p className=\"room-full-statement\">Room is already full</p>\n//             }\n//         </div>:\n//         <div className=\"rooms-main-container waiting-room-container\">\n//             <div className=\"waiting-icon-container\">\n//             </div>\n//             <div className=\"room-id-container\" onClick={()=>{\n//                 idCopied();\n//                 navigator.clipboard.writeText(roomCode);\n//                 }\n//             }>\n//                 <span>{roomCode}</span>\n//             </div>\n//             <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n//         </div>}\n//         <ToastContainer/>\n//     </div>}\n// />\n// <Route path = {\"/\"+playerRole==1?roomCode:roomId} element = {<Game gridSize={props.gridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>} />","map":{"version":3,"sources":["/Users/priyanshumodi/Desktop/Code/React/dot/src/Room.js"],"names":["React","useEffect","useState","useRef","io","Game","Header","ToastContainer","toast","Route","Link","Routes","socket","props","roomId","setRoomId","shared","setShared","joined","setJoined","roomFull","setRoomFull","playerRole","setPlayerRole","roomCode","setRoomCode","roomDoesNotExist","setRoomDoesNotExist","hostGridSize","setHostGridSize","on","dismiss","roomCopiedToastId","current","off","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","console","log","idCopied","generateRandomString","myLength","chars","randomArray","Array","from","length","v","k","Math","floor","random","randomString","join","id","gridSize","tempRoomCode","emit","navigator","clipboard","writeText","marginRight","e","target","value","key"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAO,aAAP;AACA,SAAQC,EAAR,QAAiB,kBAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;AACA,SAAQC,KAAR,EAAeC,IAAf,EAAqBC,MAArB,QAAkC,kBAAlC;;;AAEA,MAAMC,MAAM,GAAGR,EAAE,CAAC,uBAAD,CAAjB;AAEA,eAAe,UAAUS,KAAV,EAAiB;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,EAA5C,CAL4B,CAKoB;;AAChD,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,EAAxC;AACA,QAAM,CAACwB,gBAAD,EAAmBC,mBAAnB,IAA0CzB,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC0B,YAAD,EAAeC,eAAf,IAAkC3B,QAAQ,EAAhD;AAEAU,EAAAA,MAAM,CAACkB,EAAP,CAAU,YAAV,EAAwB,MAAI;AACxB,QAAGR,UAAU,IAAE,CAAf,EAAiBd,KAAK,CAACuB,OAAN,CAAcC,iBAAiB,CAACC,OAAhC;AACjBd,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH,GAHD;AAIAP,EAAAA,MAAM,CAACsB,GAAP,CAAW,WAAX,EAAwBJ,EAAxB,CAA2B,WAA3B,EAAwC,MAAI;AACxCtB,IAAAA,KAAK,CAAC,cAAD,EAAiB;AAClB2B,MAAAA,QAAQ,EAAE,WADQ;AAElBC,MAAAA,SAAS,EAAE,IAFO;AAGlBC,MAAAA,eAAe,EAAE,IAHC;AAIlBC,MAAAA,YAAY,EAAE,IAJI;AAKlBC,MAAAA,YAAY,EAAE,KALI;AAMlBC,MAAAA,SAAS,EAAE,IANO;AAOlBC,MAAAA,QAAQ,EAAEC;AAPQ,KAAjB,CAAL;AASAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,GAXD;AAYAhC,EAAAA,MAAM,CAACsB,GAAP,CAAW,qBAAX,EAAkCJ,EAAlC,CAAqC,qBAArC,EAA4D,MAAI;AAC5DH,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,GAFD;AAIA1B,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGyB,gBAAH,EAAoB;AAChBiB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACApC,MAAAA,KAAK,CAAC,qBAAD,EAAwB;AACzB2B,QAAAA,QAAQ,EAAE,WADe;AAEzBC,QAAAA,SAAS,EAAE,IAFc;AAGzBC,QAAAA,eAAe,EAAE,IAHQ;AAIzBC,QAAAA,YAAY,EAAE,IAJW;AAKzBC,QAAAA,YAAY,EAAE,KALW;AAMzBC,QAAAA,SAAS,EAAE,IANc;AAOzBC,QAAAA,QAAQ,EAAEC;AAPe,OAAxB,CAAL;AASAC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAjB,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH;AACJ,GAfQ,EAeN,CAACD,gBAAD,CAfM,CAAT;AAiBA,QAAMM,iBAAiB,GAAG7B,MAAM,CAAC,IAAD,CAAhC;;AACA,WAAS0C,QAAT,GAAoB;AAChB,QAAGb,iBAAiB,IAAE,IAAtB,EAA2B;AACvBxB,MAAAA,KAAK,CAACuB,OAAN,CAAcC,iBAAiB,CAACC,OAAhC;AACH;;AACDD,IAAAA,iBAAiB,CAACC,OAAlB,GAA4BzB,KAAK,CAAC,6BAAD,EAAgC;AAC7D2B,MAAAA,QAAQ,EAAE,WADmD;AAE7DC,MAAAA,SAAS,EAAE,IAFkD;AAG7DC,MAAAA,eAAe,EAAE,IAH4C;AAI7DC,MAAAA,YAAY,EAAE,IAJ+C;AAK7DC,MAAAA,YAAY,EAAE,KAL+C;AAM7DC,MAAAA,SAAS,EAAE,IANkD;AAO7DC,MAAAA,QAAQ,EAAEC,SAPmD,CAQ7D;;AAR6D,KAAhC,CAAjC;AAUH;;AAED,QAAMI,oBAAoB,GAAIC,QAAD,IAAc;AACvC,UAAMC,KAAK,GACT,4BADF;AAEA,UAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAClB;AAAEC,MAAAA,MAAM,EAAEL;AAAV,KADkB,EAElB,CAACM,CAAD,EAAIC,CAAJ,KAAUN,KAAK,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,KAAK,CAACI,MAAjC,CAAD,CAFG,CAApB;AAKA,UAAMM,YAAY,GAAGT,WAAW,CAACU,IAAZ,CAAiB,EAAjB,CAArB;AACA,WAAOD,YAAP;AACD,GAVH;;AAYA,sBACI;AAAA,cACKxC,MAAM;AAAA;AACP;AACI,YAAC,IAAD;AAAM,MAAA,QAAQ,EAAEU,YAAhB;AAA8B,MAAA,MAAM,EAAEN,UAAU,IAAE,CAAZ,GAAcE,QAAd,GAAuBV,MAA7D;AAAqE,MAAA,QAAQ,EAAEF,MAAM,CAACgD,EAAtF;AAA0F,MAAA,UAAU,EAAEtC;AAAtG;AAAA;AAAA;AAAA;AAAA,YAFG,CAGP;AAHO;AAAA;AAKP;AACA;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAET,KAAK,CAACgD;AAAxB;AAAA;AAAA;AAAA;AAAA,cADJ,EAEK,CAAC7C,MAAD,gBACD;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,uBAAf;AAAA,iCACI;AACI,YAAA,SAAS,EAAC,aADd;AAEI,YAAA,OAAO,EAAE,MAAI;AACTa,cAAAA,eAAe,CAAChB,KAAK,CAACgD,QAAP,CAAf;AACAhB,cAAAA,QAAQ;AACR5B,cAAAA,SAAS,CAAC,IAAD,CAAT;AACA,kBAAI6C,YAAY,GAAGhB,oBAAoB,CAAC,CAAD,CAAvC;AACArB,cAAAA,WAAW,CAACqC,YAAD,CAAX,CALS,CAMT;;AACAlD,cAAAA,MAAM,CAACmD,IAAP,CAAY,cAAZ,EAA4BD,YAA5B;AACAvC,cAAAA,aAAa,CAAC,CAAD,CAAb;AACAyC,cAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BJ,YAA9B;AACC;AAZT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAkBI;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA,kCACI;AACI,YAAA,SAAS,EAAC,YADd;AAEI,YAAA,IAAI,EAAC,MAFT;AAGI,YAAA,KAAK,EAAEhD,MAAM,KAAG,EAAT,GAAY;AAACqD,cAAAA,WAAW,EAAE;AAAd,aAAZ,GAAkC;AAACA,cAAAA,WAAW,EAAC;AAAb,aAH7C;AAII,YAAA,QAAQ,EAAGC,CAAD,IAAK;AACXrD,cAAAA,SAAS,CAACqD,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACH,aANL;AAOI,YAAA,UAAU,EAAGF,CAAD,IAAK;AACb,kBAAGA,CAAC,CAACG,GAAF,KAAQ,OAAX,EAAmB;AACfhD,gBAAAA,aAAa,CAAC,CAAD,CAAb;AACAX,gBAAAA,MAAM,CAACmD,IAAP,CAAY,aAAZ,EAA2BjD,MAA3B;AACH;AACJ;AAZL;AAAA;AAAA;AAAA;AAAA,kBADJ,EAeKA,MAAM,KAAG,EAAT,gBACG;AAAQ,YAAA,SAAS,EAAC,WAAlB;AACI,YAAA,OAAO,EAAE,MAAI;AACTS,cAAAA,aAAa,CAAC,CAAD,CAAb;AACAX,cAAAA,MAAM,CAACmD,IAAP,CAAY,aAAZ,EAA2BjD,MAA3B;AACH,aAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADH,GAQA6B,OAAO,CAACC,GAAR,CAAY,eAAZ,CAvBL;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBJ,EA4CK,CAACxB,QAAD,gBACG;AAAG,UAAA,SAAS,EAAC,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH,gBAGG;AAAG,UAAA,SAAS,EAAC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA/CR;AAAA;AAAA;AAAA;AAAA;AAAA,cADC,gBAmDD;AAAK,QAAA,SAAS,EAAC,6CAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADJ,eAGI;AAAK,UAAA,SAAS,EAAC,mBAAf;AAAmC,UAAA,OAAO,EAAE,MAAI;AAC5CyB,YAAAA,QAAQ;AACRmB,YAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8B1C,QAA9B;AACC,WAHL;AAAA,iCAKI;AAAA,sBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAUI;AAAG,UAAA,SAAS,EAAC,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,cArDJ,eAiEI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAjEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ,mBADJ;AA8EH,C,CAGO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\nimport \"./style.css\"\nimport {io} from \"socket.io-client\"\nimport Game from \"./Game\"\nimport Header from './Components/Header';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {Route, Link, Routes} from \"react-router-dom\";\n\nconst socket = io('http://localhost:4000');\n\nexport default function (props) {\n    const [roomId, setRoomId] = useState(\"\");\n    const [shared, setShared] = useState(false);\n    const [joined, setJoined] = useState(false)\n    const [roomFull, setRoomFull] = useState(false);\n    const [playerRole, setPlayerRole] = useState(); // playerRole=1 if he created the room, else 2 if he joined one\n    const [roomCode, setRoomCode] = useState();\n    const [roomDoesNotExist, setRoomDoesNotExist] = useState(false);\n    const [hostGridSize, setHostGridSize] = useState();\n    \n    socket.on(\"start-game\", ()=>{\n        if(playerRole==1)toast.dismiss(roomCopiedToastId.current);\n        setJoined(true);\n    })\n    socket.off(\"room-full\").on(\"room-full\", ()=>{\n        toast(\"Room is full\", {\n            position: \"top-right\",\n            autoClose: 1000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n        });\n        console.log(\"room is full\")\n    })\n    socket.off('room-does-not-exist').on(\"room-does-not-exist\", ()=>{\n        setRoomDoesNotExist(true);\n    })\n\n    useEffect(()=>{ \n        if(roomDoesNotExist){\n            console.log(\"here\");\n            toast(\"Room does not exist\", {\n                position: \"top-right\",\n                autoClose: 1000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: false,\n                draggable: true,\n                progress: undefined,\n            });\n            console.log(\"Room does not exist\");\n            setRoomDoesNotExist(false);\n        }\n    }, [roomDoesNotExist])\n\n    const roomCopiedToastId = useRef(null);\n    function idCopied (){\n        if(roomCopiedToastId!=null){\n            toast.dismiss(roomCopiedToastId.current);\n        }\n        roomCopiedToastId.current = toast(\"Room ID copied to clipboard\", {\n            position: \"top-right\",\n            autoClose: 1000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n            // transition: \"zoom\"\n        });  \n    } \n\n    const generateRandomString = (myLength) => {\n        const chars =\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        const randomArray = Array.from(\n          { length: myLength },\n          (v, k) => chars[Math.floor(Math.random() * chars.length)]\n        );\n      \n        const randomString = randomArray.join(\"\");\n        return randomString;\n      };\n\n    return (\n        <>\n            {joined?\n            // <Route exact path={\"/\"+playerRole==1?roomCode:roomId} element={\n                <Game gridSize={hostGridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>\n            // }/>\n            :\n            // <Route exact path={\"/\"} element={\n            <div>\n                <Header gridSize={props.gridSize}/>\n                {!shared?\n                <div className=\"rooms-main-container\">\n                    <div className=\"create-room-container\">\n                        <button \n                            className=\"create-room\" \n                            onClick={()=>{\n                                setHostGridSize(props.gridSize);\n                                idCopied();\n                                setShared(true);\n                                var tempRoomCode = generateRandomString(6);\n                                setRoomCode(tempRoomCode);\n                                // console.log(tempRoomCode);\n                                socket.emit(\"room-created\", tempRoomCode);\n                                setPlayerRole(1)\n                                navigator.clipboard.writeText(tempRoomCode)\n                                }\n                            }>    \n                        </button>\n                    </div>\n                    <div className=\"join-room-container\">\n                        <input \n                            className=\"room-input\" \n                            type=\"text\" \n                            style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n                            onChange={(e)=>{\n                                setRoomId(e.target.value);\n                            }} \n                            onKeyPress={(e)=>{\n                                if(e.key===\"Enter\"){\n                                    setPlayerRole(2)\n                                    socket.emit(\"joined-room\", roomId);\n                                }\n                            }}\n                        />\n                        {roomId!==\"\"?\n                            <button className=\"join-room\"   \n                                onClick={()=>{\n                                    setPlayerRole(2);\n                                    socket.emit(\"joined-room\", roomId)\n                                }}>\n                            Join\n                            </button>\n                        :console.log(\"Enter Room Id\")\n                        }\n                    </div>\n                    {!roomFull?\n                        <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n                    :\n                        <p className=\"room-full-statement\">Room is already full</p>\n                    }\n                </div>:\n                <div className=\"rooms-main-container waiting-room-container\">\n                    <div className=\"waiting-icon-container\">\n                    </div>\n                    <div className=\"room-id-container\" onClick={()=>{\n                        idCopied();\n                        navigator.clipboard.writeText(roomCode);\n                        }\n                    }>\n                        <span>{roomCode}</span>\n                    </div>\n                    <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n                </div>}\n                <ToastContainer/>\n            </div> \n            }\n        </>\n  )\n}\n\n\n        // <Route path = \"/\" element = {\n        //     <div>\n        //         <Header gridSize={props.gridSize}/>\n        //         {!shared?\n        //         <div className=\"rooms-main-container\">\n        //             <Link to={\"/\"+roomCode} style={{textDecoration: \"none\"}}>\n        //                 <div className=\"create-room-container\">\n        //                     <button \n        //                         className=\"create-room\" \n        //                         onClick={()=>{\n        //                             idCopied();\n        //                             setShared(true);\n        //                             var tempRoomCode = generateRandomString(6);\n        //                             setRoomCode(tempRoomCode);\n        //                             // console.log(tempRoomCode);\n        //                             socket.emit(\"room-created\", tempRoomCode);\n        //                             setPlayerRole(1)\n        //                             navigator.clipboard.writeText(tempRoomCode)\n        //                             }\n        //                         }>    \n        //                     </button>\n        //                 </div>\n        //             </Link>\n        //             <Link to={\"/\"+roomId} style={{textDecoration: \"none\"}}>\n        //                 <div className=\"join-room-container\">\n        //                     <input \n        //                         className=\"room-input\" \n        //                         type=\"text\" \n        //                         style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n        //                         onChange={(e)=>{\n        //                             setRoomId(e.target.value);\n        //                         }} \n        //                         onKeyPress={(e)=>{\n        //                             if(e.key===\"Enter\"){\n        //                                 setPlayerRole(2)\n        //                                 socket.emit(\"joined-room\", roomId);\n        //                             }\n        //                         }}\n        //                     />\n        //                     {roomId!==\"\"?\n        //                         <button className=\"join-room\"   \n        //                             onClick={()=>{\n        //                                 setPlayerRole(2);\n        //                                 socket.emit(\"joined-room\", roomId)\n        //                             }}>\n        //                         Join\n        //                         </button>\n        //                     :null\n        //                     }\n        //                 </div>\n        //             </Link>\n        //             {!roomFull?\n        //                 <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n        //             :\n        //                 <p className=\"room-full-statement\">Room is already full</p>\n        //             }\n        //         </div>:\n        //         <div className=\"rooms-main-container waiting-room-container\">\n        //             <div className=\"waiting-icon-container\">\n        //             </div>\n        //             <div className=\"room-id-container\" onClick={()=>{\n        //                 idCopied();\n        //                 navigator.clipboard.writeText(roomCode);\n        //                 }\n        //             }>\n        //                 <span>{roomCode}</span>\n        //             </div>\n        //             <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n        //         </div>}\n        //         <ToastContainer/>\n        //     </div>}\n        // />\n        // <Route path = {\"/\"+playerRole==1?roomCode:roomId} element = {<Game gridSize={props.gridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>} />"]},"metadata":{},"sourceType":"module"}