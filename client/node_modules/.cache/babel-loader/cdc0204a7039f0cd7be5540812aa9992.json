{"ast":null,"code":"var _jsxFileName = \"/Users/priyanshumodi/Desktop/Code/React/dot/src/Components/GameOver.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"../style.css\";\nimport { Route, Link, Routes, useNavigate } from \"react-router-dom\";\nimport Game from \"../Game.js\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Confetti from 'react-confetti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GameOver(props) {\n  _s();\n\n  var result;\n  const [gridSize, setGridSize] = useState(4);\n  const [hideWinner, setHideWinner] = useState(\"flex\");\n  const [showShare, setShowShare] = useState(\"none\");\n  const navigate = useNavigate();\n\n  const generateRandomString = myLength => {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const randomArray = Array.from({\n      length: myLength\n    }, (v, k) => chars[Math.floor(Math.random() * chars.length)]);\n    const randomString = randomArray.join(\"\");\n    return randomString;\n  };\n\n  const newRoomId = generateRandomString(6);\n\n  (function calcResult() {\n    if (props.redScore > props.blueScore) {\n      result = \"red\";\n    } else if (props.redScore < props.blueScore) {\n      result = \"blue\";\n    } else {\n      result = \"draw\";\n    }\n  })();\n\n  function createEmoji() {\n    var i = 0;\n\n    if (result == \"draw\") {\n      var message = \"It's a draw\\n\\n\";\n    } else if (result == \"red\") {\n      message = \"ðŸ‘‘ Red\\n\\n\";\n    } else {\n      message = \"ðŸ‘‘ Blue\\n\\n\";\n    }\n\n    for (const [key, value] of props.boxMap.entries()) {\n      if (props.gridSize == 4) {\n        if (i == 4) {\n          message += \"\\n\";\n          i = 0;\n        }\n      } else {\n        if (i == 8) {\n          message += \"\\n\";\n          i = 0;\n        }\n      }\n\n      if (value == \"#c5183b\") {\n        message += \"ðŸŸ¥\";\n      } else {\n        message += \"ðŸŸ¦\";\n      }\n\n      i++;\n    }\n\n    console.log(message);\n    navigator.clipboard.writeText(message);\n  }\n\n  function resultCopied() {\n    toast(\"Result copied to clipboard\", {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined\n    });\n  }\n\n  function confettiFunction() {\n    return /*#__PURE__*/_jsxDEV(Confetti, {\n      colors: result == \"blue\" ? [\"#3b919b\"] : [\"#c5183b\"],\n      numberOfPieces: 80,\n      recycle: false // initialVelocityX = {10}\n      // initialVelocityY = {10}\n      // tweenDuration = {1000}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [confettiFunction(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logo-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-outer-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-container\",\n        id: result + \"-winner-container\",\n        onMouseEnter: () => {\n          setHideWinner(\"none\");\n          setShowShare(\"flex\");\n        },\n        onMouseLeave: () => {\n          setHideWinner(\"flex\");\n          setShowShare(\"none\");\n        },\n        onClick: () => {\n          resultCopied();\n          createEmoji();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"winner-text-container\",\n          style: {\n            display: hideWinner\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"winner-text\",\n            children: result == \"draw\" ? \"It's a draw\" : result + \" wins\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"share-container\",\n          style: {\n            display: showShare\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"grid-button\",\n      id: props.gridSize == 4 ? \"four-button\" : \"eight-button\",\n      onClick: () => {\n        navigate(-1);\n      },\n      children: \"Go Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(GameOver, \"0YidMysEWLHJQRQ9SYVnmSvFZSw=\", false, function () {\n  return [useNavigate];\n});\n\n_c = GameOver;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameOver\");","map":{"version":3,"sources":["/Users/priyanshumodi/Desktop/Code/React/dot/src/Components/GameOver.js"],"names":["React","useState","Route","Link","Routes","useNavigate","Game","ToastContainer","toast","Confetti","GameOver","props","result","gridSize","setGridSize","hideWinner","setHideWinner","showShare","setShowShare","navigate","generateRandomString","myLength","chars","randomArray","Array","from","length","v","k","Math","floor","random","randomString","join","newRoomId","calcResult","redScore","blueScore","createEmoji","i","message","key","value","boxMap","entries","console","log","navigator","clipboard","writeText","resultCopied","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","confettiFunction","display"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,cAAP;AACA,SAAQC,KAAR,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,WAA7B,QAA+C,kBAA/C;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;AACA,OAAOC,QAAP,MAAqB,gBAArB;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACpC,MAAIC,MAAJ;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,MAAD,CAA5C;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,MAAD,CAA1C;AACA,QAAMkB,QAAQ,GAAGd,WAAW,EAA5B;;AACA,QAAMe,oBAAoB,GAAIC,QAAD,IAAc;AACvC,UAAMC,KAAK,GACT,4BADF;AAEA,UAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAClB;AAAEC,MAAAA,MAAM,EAAEL;AAAV,KADkB,EAElB,CAACM,CAAD,EAAIC,CAAJ,KAAUN,KAAK,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,KAAK,CAACI,MAAjC,CAAD,CAFG,CAApB;AAKA,UAAMM,YAAY,GAAGT,WAAW,CAACU,IAAZ,CAAiB,EAAjB,CAArB;AACA,WAAOD,YAAP;AACH,GAVD;;AAWA,QAAME,SAAS,GAAGd,oBAAoB,CAAC,CAAD,CAAtC;;AAEA,GAAC,SAASe,UAAT,GAAqB;AAClB,QAAGxB,KAAK,CAACyB,QAAN,GAAezB,KAAK,CAAC0B,SAAxB,EAAkC;AAC9BzB,MAAAA,MAAM,GAAG,KAAT;AACH,KAFD,MAGK,IAAGD,KAAK,CAACyB,QAAN,GAAezB,KAAK,CAAC0B,SAAxB,EAAkC;AACnCzB,MAAAA,MAAM,GAAG,MAAT;AACH,KAFI,MAGD;AACAA,MAAAA,MAAM,GAAG,MAAT;AACH;AACJ,GAVD;;AAYA,WAAS0B,WAAT,GAAsB;AAClB,QAAIC,CAAC,GAAC,CAAN;;AACA,QAAG3B,MAAM,IAAI,MAAb,EAAoB;AAChB,UAAI4B,OAAO,GAAG,iBAAd;AACH,KAFD,MAGK,IAAG5B,MAAM,IAAE,KAAX,EAAiB;AAClB4B,MAAAA,OAAO,GAAG,YAAV;AACH,KAFI,MAGD;AACAA,MAAAA,OAAO,GAAG,aAAV;AACH;;AACD,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2B/B,KAAK,CAACgC,MAAN,CAAaC,OAAb,EAA3B,EAAmD;AAC/C,UAAGjC,KAAK,CAACE,QAAN,IAAgB,CAAnB,EAAqB;AACjB,YAAG0B,CAAC,IAAE,CAAN,EAAQ;AACJC,UAAAA,OAAO,IAAE,IAAT;AACAD,UAAAA,CAAC,GAAC,CAAF;AACH;AACJ,OALD,MAMI;AACA,YAAGA,CAAC,IAAE,CAAN,EAAQ;AACJC,UAAAA,OAAO,IAAE,IAAT;AACAD,UAAAA,CAAC,GAAC,CAAF;AACH;AACJ;;AACD,UAAGG,KAAK,IAAE,SAAV,EAAoB;AAChBF,QAAAA,OAAO,IAAE,IAAT;AACH,OAFD,MAGI;AACAA,QAAAA,OAAO,IAAE,IAAT;AACH;;AACDD,MAAAA,CAAC;AACJ;;AACDM,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACAO,IAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BT,OAA9B;AACH;;AAED,WAASU,YAAT,GAAwB;AACpB1C,IAAAA,KAAK,CAAC,4BAAD,EAA+B;AAChC2C,MAAAA,QAAQ,EAAE,WADsB;AAEhCC,MAAAA,SAAS,EAAE,IAFqB;AAGhCC,MAAAA,eAAe,EAAE,IAHe;AAIhCC,MAAAA,YAAY,EAAE,IAJkB;AAKhCC,MAAAA,YAAY,EAAE,KALkB;AAMhCC,MAAAA,SAAS,EAAE,IANqB;AAOhCC,MAAAA,QAAQ,EAAEC;AAPsB,KAA/B,CAAL;AASH;;AAED,WAASC,gBAAT,GAA2B;AACvB,wBACI,QAAC,QAAD;AACA,MAAA,MAAM,EAAI/C,MAAM,IAAE,MAAR,GAAe,CAAC,SAAD,CAAf,GAA2B,CAAC,SAAD,CADrC;AAEA,MAAA,cAAc,EAAI,EAFlB;AAGA,MAAA,OAAO,EAAI,KAHX,CAIA;AACA;AACA;;AANA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AAED,sBACA;AAAA,eACK+C,gBAAgB,EADrB,eAEI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACI;AACI,QAAA,SAAS,EAAC,kBADd;AAEI,QAAA,EAAE,EAAE/C,MAAM,GAAC,mBAFf;AAGI,QAAA,YAAY,EAAE,MAAI;AAACI,UAAAA,aAAa,CAAC,MAAD,CAAb;AAAuBE,UAAAA,YAAY,CAAC,MAAD,CAAZ;AAAqB,SAHnE;AAII,QAAA,YAAY,EAAE,MAAI;AAACF,UAAAA,aAAa,CAAC,MAAD,CAAb;AAAuBE,UAAAA,YAAY,CAAC,MAAD,CAAZ;AAAqB,SAJnE;AAKI,QAAA,OAAO,EAAE,MAAI;AACTgC,UAAAA,YAAY;AACZZ,UAAAA,WAAW;AACd,SARL;AAAA,gCAUQ;AACI,UAAA,SAAS,EAAC,uBADd;AAEI,UAAA,KAAK,EAAE;AAACsB,YAAAA,OAAO,EAAE7C;AAAV,WAFX;AAAA,iCAIQ;AACI,YAAA,SAAS,EAAC,aADd;AAAA,sBAESH,MAAM,IAAE,MAAR,GAAe,aAAf,GAA6BA,MAAM,GAAC;AAF7C;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,gBAVR,eAmBQ;AACI,UAAA,SAAS,EAAC,iBADd;AAEI,UAAA,KAAK,EAAE;AAACgD,YAAAA,OAAO,EAAE3C;AAAV;AAFX;AAAA;AAAA;AAAA;AAAA,gBAnBR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ,eA8BI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YA9BJ,eAgCQ;AACI,MAAA,SAAS,EAAC,aADd;AAEI,MAAA,EAAE,EAAEN,KAAK,CAACE,QAAN,IAAgB,CAAhB,GAAkB,aAAlB,GAAgC,cAFxC;AAGI,MAAA,OAAO,EAAE,MAAI;AAACM,QAAAA,QAAQ,CAAC,CAAC,CAAF,CAAR;AAAa,OAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhCR;AAAA,kBADA;AA+CH;;GA3IuBT,Q;UAKHL,W;;;KALGK,Q","sourcesContent":["import React, {useState} from 'react'\nimport \"../style.css\"\nimport {Route, Link, Routes, useNavigate} from \"react-router-dom\";\nimport Game from \"../Game.js\"\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Confetti from 'react-confetti'\n\nexport default function GameOver(props) {\n    var result;\n    const [gridSize, setGridSize] = useState(4);\n    const [hideWinner, setHideWinner] = useState(\"flex\");\n    const [showShare, setShowShare] = useState(\"none\");\n    const navigate = useNavigate();\n    const generateRandomString = (myLength) => {\n        const chars =\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        const randomArray = Array.from(\n          { length: myLength },\n          (v, k) => chars[Math.floor(Math.random() * chars.length)]\n        );\n      \n        const randomString = randomArray.join(\"\");\n        return randomString;\n    };\n    const newRoomId = generateRandomString(6);\n\n    (function calcResult(){\n        if(props.redScore>props.blueScore){\n            result = \"red\";\n        }\n        else if(props.redScore<props.blueScore){\n            result = \"blue\";\n        }\n        else{\n            result = \"draw\";\n        }\n    })();\n    \n    function createEmoji(){\n        var i=0;\n        if(result == \"draw\"){\n            var message = \"It's a draw\\n\\n\";\n        }\n        else if(result==\"red\"){\n            message = \"ðŸ‘‘ Red\\n\\n\";\n        }\n        else{\n            message = \"ðŸ‘‘ Blue\\n\\n\";\n        }\n        for (const [key, value] of props.boxMap.entries()) {\n            if(props.gridSize==4){\n                if(i==4){\n                    message+=\"\\n\";\n                    i=0;\n                }\n            }\n            else{\n                if(i==8){\n                    message+=\"\\n\";\n                    i=0;\n                }\n            }\n            if(value==\"#c5183b\"){\n                message+=\"ðŸŸ¥\";\n            }\n            else{\n                message+=\"ðŸŸ¦\";\n            }\n            i++;\n        }   \n        console.log(message);\n        navigator.clipboard.writeText(message);\n    }\n\n    function resultCopied (){\n        toast(\"Result copied to clipboard\", {\n            position: \"top-right\",\n            autoClose: 1000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n        });  \n    } \n\n    function confettiFunction(){\n        return (\n            <Confetti \n            colors = {result==\"blue\"?[\"#3b919b\"]:[\"#c5183b\"]}\n            numberOfPieces = {80}\n            recycle = {false}\n            // initialVelocityX = {10}\n            // initialVelocityY = {10}\n            // tweenDuration = {1000}\n        />\n        )\n    }\n\n    return (\n    <>\n        {confettiFunction()}\n        <div className=\"logo-container\"></div>\n        <div className=\"winner-outer-container\">\n            <div \n                className=\"winner-container\" \n                id={result+\"-winner-container\"} \n                onMouseEnter={()=>{setHideWinner(\"none\"); setShowShare(\"flex\")}} \n                onMouseLeave={()=>{setHideWinner(\"flex\"); setShowShare(\"none\")}}\n                onClick={()=>{\n                    resultCopied();\n                    createEmoji();\n                }}\n            >\n                    <div \n                        className=\"winner-text-container\" \n                        style={{display: hideWinner}}\n                    >\n                            <h2 \n                                className=\"winner-text\">\n                                    {result==\"draw\"?\"It's a draw\":result+\" wins\"}\n                            </h2>\n                    </div>\n                    <div \n                        className=\"share-container\" \n                        style={{display: showShare}} \n                    >\n                </div>\n            </div>\n        </div>\n        <ToastContainer/>\n        {/* <Link to={\"/game\"}> */}\n            <button \n                className=\"grid-button\" \n                id={props.gridSize==4?\"four-button\":\"eight-button\"} \n                onClick={()=>{navigate(-1)}}\n                >\n                Go Again\n            </button>\n        {/* </Link> */}\n        {/* {console.log(props.gridSize, props.vsComp)} */}\n        {/* <Routes>\n            <Route exact path={\"/game\"} element={<Game gridSize={props.gridSize} vsComp={props.vsComp}/>}/>\n        </Routes> */}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}