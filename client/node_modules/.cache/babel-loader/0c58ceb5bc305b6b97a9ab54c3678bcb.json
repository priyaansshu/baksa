{"ast":null,"code":"var _jsxFileName = \"/Users/priyanshumodi/Desktop/Code/React/dot/src/Room.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport \"./style.css\";\nimport { io } from \"socket.io-client\";\nimport Game from \"./Game\";\nimport Header from './Components/Header';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Route, Link, Routes } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:4000');\nexport default function (props) {\n  const [roomId, setRoomId] = useState(\"\");\n  const [shared, setShared] = useState(false);\n  const [joined, setJoined] = useState(false);\n  const [roomFull, setRoomFull] = useState(false);\n  const [playerRole, setPlayerRole] = useState(); // playerRole=1 if he created the room, else 2 if he joined one\n\n  const [roomCode, setRoomCode] = useState();\n  const [roomDoesNotExist, setRoomDoesNotExist] = useState(false);\n  socket.on(\"start-game\", () => {\n    if (playerRole == 1) toast.dismiss(roomCopiedToastId.current);\n    setJoined(true);\n  });\n  socket.off(\"room-full\").on(\"room-full\", () => {\n    toast(\"Room is full\", {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined\n    });\n    console.log(\"room is full\");\n  });\n  socket.off('room-does-not-exist').on(\"room-does-not-exist\", () => {\n    setRoomDoesNotExist(true);\n  });\n  useEffect(() => {\n    if (roomDoesNotExist) {\n      console.log(\"here\");\n      toast(\"Room does not exist\", {\n        position: \"top-right\",\n        autoClose: 1000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: true,\n        progress: undefined\n      });\n      console.log(\"Room does not exist\");\n      setRoomDoesNotExist(false);\n    }\n  }, [roomDoesNotExist]);\n  const roomCopiedToastId = useRef(null);\n\n  function idCopied() {\n    if (roomCopiedToastId != null) {\n      toast.dismiss(roomCopiedToastId.current);\n    }\n\n    roomCopiedToastId.current = toast(\"Room ID copied to clipboard\", {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined // transition: \"zoom\"\n\n    });\n  }\n\n  const generateRandomString = myLength => {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const randomArray = Array.from({\n      length: myLength\n    }, (v, k) => chars[Math.floor(Math.random() * chars.length)]);\n    const randomString = randomArray.join(\"\");\n    return randomString;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          gridSize: props.gridSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), !shared ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rooms-main-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-room-container\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"create-room\",\n              onClick: () => {\n                idCopied();\n                setShared(true);\n                var tempRoomCode = generateRandomString(6);\n                setRoomCode(tempRoomCode); // console.log(tempRoomCode);\n\n                socket.emit(\"room-created\", tempRoomCode);\n                setPlayerRole(1);\n                navigator.clipboard.writeText(tempRoomCode);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"join-room-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"room-input\",\n              type: \"text\",\n              style: roomId !== \"\" ? {\n                marginRight: \"10px\"\n              } : {\n                marginRight: \"0px\"\n              },\n              onChange: e => {\n                setRoomId(e.target.value);\n              },\n              onKeyPress: e => {\n                if (e.key === \"Enter\") {\n                  setPlayerRole(2);\n                  socket.emit(\"joined-room\", roomId);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this), roomId !== \"\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"join-room\",\n              onClick: () => {\n                setPlayerRole(2);\n                socket.emit(\"joined-room\", roomId);\n              },\n              children: \"Join\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 33\n            }, this) : console.log(\"Enter Room Id\")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), !roomFull ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"room-id-statement\",\n            children: \"Share Room ID with a friend or enter a Room ID to start the game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"room-full-statement\",\n            children: \"Room is already full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rooms-main-container waiting-room-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"waiting-icon-container\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"room-id-container\",\n            onClick: () => {\n              idCopied();\n              navigator.clipboard.writeText(roomCode);\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: roomCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"room-id-statement\",\n            children: \"Waiting for the other player to join the room\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\" + playerRole == 1 ? roomCode : roomId,\n      element: /*#__PURE__*/_jsxDEV(Game, {\n        gridSize: props.gridSize,\n        roomId: playerRole == 1 ? roomCode : roomId,\n        socketId: socket.id,\n        playerRole: playerRole\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 74\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n} // <>\n//     <Header gridSize={props.gridSize}/>\n//     {joined?\n//     <Game gridSize={props.gridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>:\n//     !shared?\n//     <div className=\"rooms-main-container\">\n//         <div className=\"create-room-container\">\n//             <button \n//                 className=\"create-room\" \n//                 onClick={()=>{\n//                     idCopied();\n//                     setShared(true);\n//                     var tempRoomCode = generateRandomString(6);\n//                     setRoomCode(tempRoomCode);\n//                     // console.log(tempRoomCode);\n//                     socket.emit(\"room-created\", tempRoomCode);\n//                     setPlayerRole(1)\n//                     navigator.clipboard.writeText(tempRoomCode)\n//                     }\n//                 }>    \n//             </button>\n//         </div>\n//         <div className=\"join-room-container\">\n//             <input \n//                 className=\"room-input\" \n//                 type=\"text\" \n//                 style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n//                 onChange={(e)=>{\n//                     setRoomId(e.target.value);\n//                 }} \n//                 onKeyPress={(e)=>{\n//                     if(e.key===\"Enter\"){\n//                         setPlayerRole(2)\n//                         socket.emit(\"joined-room\", roomId);\n//                     }\n//                 }}\n//             />\n//             {roomId!==\"\"?\n//                 <button className=\"join-room\"   \n//                     onClick={()=>{\n//                         setPlayerRole(2);\n//                         socket.emit(\"joined-room\", roomId)\n//                     }}>\n//                 Join\n//                 </button>\n//             :console.log(\"Enter Room Id\")\n//             }\n//         </div>\n//         {!roomFull?\n//             <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n//         :\n//             <p className=\"room-full-statement\">Room is already full</p>\n//         }\n//     </div>:\n//     <div className=\"rooms-main-container waiting-room-container\">\n//         <div className=\"waiting-icon-container\">\n//         </div>\n//         <div className=\"room-id-container\" onClick={()=>{\n//             idCopied();\n//             navigator.clipboard.writeText(roomCode);\n//             }\n//         }>\n//             <span>{roomCode}</span>\n//         </div>\n//         <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n//     </div>}\n//     <ToastContainer/>\n// </>","map":{"version":3,"sources":["/Users/priyanshumodi/Desktop/Code/React/dot/src/Room.js"],"names":["React","useEffect","useState","useRef","io","Game","Header","ToastContainer","toast","Route","Link","Routes","socket","props","roomId","setRoomId","shared","setShared","joined","setJoined","roomFull","setRoomFull","playerRole","setPlayerRole","roomCode","setRoomCode","roomDoesNotExist","setRoomDoesNotExist","on","dismiss","roomCopiedToastId","current","off","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","console","log","idCopied","generateRandomString","myLength","chars","randomArray","Array","from","length","v","k","Math","floor","random","randomString","join","gridSize","tempRoomCode","emit","navigator","clipboard","writeText","marginRight","e","target","value","key","id"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\nimport \"./style.css\"\nimport {io} from \"socket.io-client\"\nimport Game from \"./Game\"\nimport Header from './Components/Header';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {Route, Link, Routes} from \"react-router-dom\";\n\nconst socket = io('http://localhost:4000');\n\nexport default function (props) {\n    const [roomId, setRoomId] = useState(\"\");\n    const [shared, setShared] = useState(false);\n    const [joined, setJoined] = useState(false)\n    const [roomFull, setRoomFull] = useState(false);\n    const [playerRole, setPlayerRole] = useState(); // playerRole=1 if he created the room, else 2 if he joined one\n    const [roomCode, setRoomCode] = useState();\n    const [roomDoesNotExist, setRoomDoesNotExist] = useState(false);\n    \n    socket.on(\"start-game\", ()=>{\n        if(playerRole==1)toast.dismiss(roomCopiedToastId.current);\n        setJoined(true);\n    })\n    socket.off(\"room-full\").on(\"room-full\", ()=>{\n        toast(\"Room is full\", {\n            position: \"top-right\",\n            autoClose: 1000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n        });\n        console.log(\"room is full\")\n    })\n    socket.off('room-does-not-exist').on(\"room-does-not-exist\", ()=>{\n        setRoomDoesNotExist(true);\n    })\n\n    useEffect(()=>{ \n        if(roomDoesNotExist){\n            console.log(\"here\");\n            toast(\"Room does not exist\", {\n                position: \"top-right\",\n                autoClose: 1000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: false,\n                draggable: true,\n                progress: undefined,\n            });\n            console.log(\"Room does not exist\");\n            setRoomDoesNotExist(false);\n        }\n    }, [roomDoesNotExist])\n\n    const roomCopiedToastId = useRef(null);\n    function idCopied (){\n        if(roomCopiedToastId!=null){\n            toast.dismiss(roomCopiedToastId.current);\n        }\n        roomCopiedToastId.current = toast(\"Room ID copied to clipboard\", {\n            position: \"top-right\",\n            autoClose: 1000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n            // transition: \"zoom\"\n        });  \n    } \n\n    const generateRandomString = (myLength) => {\n        const chars =\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        const randomArray = Array.from(\n          { length: myLength },\n          (v, k) => chars[Math.floor(Math.random() * chars.length)]\n        );\n      \n        const randomString = randomArray.join(\"\");\n        return randomString;\n      };\n\n    return (\n        <Routes>\n            <Route path = \"/\" element = {\n                <div>\n                    <Header gridSize={props.gridSize}/>\n                    {!shared?\n                    <div className=\"rooms-main-container\">\n                        <div className=\"create-room-container\">\n                            <button \n                                className=\"create-room\" \n                                onClick={()=>{\n                                    idCopied();\n                                    setShared(true);\n                                    var tempRoomCode = generateRandomString(6);\n                                    setRoomCode(tempRoomCode);\n                                    // console.log(tempRoomCode);\n                                    socket.emit(\"room-created\", tempRoomCode);\n                                    setPlayerRole(1)\n                                    navigator.clipboard.writeText(tempRoomCode)\n                                    }\n                                }>    \n                            </button>\n                        </div>\n                        <div className=\"join-room-container\">\n                            <input \n                                className=\"room-input\" \n                                type=\"text\" \n                                style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n                                onChange={(e)=>{\n                                    setRoomId(e.target.value);\n                                }} \n                                onKeyPress={(e)=>{\n                                    if(e.key===\"Enter\"){\n                                        setPlayerRole(2)\n                                        socket.emit(\"joined-room\", roomId);\n                                    }\n                                }}\n                            />\n                            {roomId!==\"\"?\n                                <button className=\"join-room\"   \n                                    onClick={()=>{\n                                        setPlayerRole(2);\n                                        socket.emit(\"joined-room\", roomId)\n                                    }}>\n                                Join\n                                </button>\n                            :console.log(\"Enter Room Id\")\n                            }\n                        </div>\n                        {!roomFull?\n                            <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n                        :\n                            <p className=\"room-full-statement\">Room is already full</p>\n                        }\n                    </div>:\n                    <div className=\"rooms-main-container waiting-room-container\">\n                        <div className=\"waiting-icon-container\">\n                        </div>\n                        <div className=\"room-id-container\" onClick={()=>{\n                            idCopied();\n                            navigator.clipboard.writeText(roomCode);\n                            }\n                        }>\n                            <span>{roomCode}</span>\n                        </div>\n                        <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n                    </div>}\n                    <ToastContainer/>\n                </div>}\n            />\n            <Route path = {\"/\"+playerRole==1?roomCode:roomId} element = {<Game gridSize={props.gridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>} />\n    </Routes>\n  )\n}\n\n\n\n        // <>\n        //     <Header gridSize={props.gridSize}/>\n        //     {joined?\n        //     <Game gridSize={props.gridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>:\n        //     !shared?\n        //     <div className=\"rooms-main-container\">\n        //         <div className=\"create-room-container\">\n        //             <button \n        //                 className=\"create-room\" \n        //                 onClick={()=>{\n        //                     idCopied();\n        //                     setShared(true);\n        //                     var tempRoomCode = generateRandomString(6);\n        //                     setRoomCode(tempRoomCode);\n        //                     // console.log(tempRoomCode);\n        //                     socket.emit(\"room-created\", tempRoomCode);\n        //                     setPlayerRole(1)\n        //                     navigator.clipboard.writeText(tempRoomCode)\n        //                     }\n        //                 }>    \n        //             </button>\n        //         </div>\n        //         <div className=\"join-room-container\">\n        //             <input \n        //                 className=\"room-input\" \n        //                 type=\"text\" \n        //                 style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n        //                 onChange={(e)=>{\n        //                     setRoomId(e.target.value);\n        //                 }} \n        //                 onKeyPress={(e)=>{\n        //                     if(e.key===\"Enter\"){\n        //                         setPlayerRole(2)\n        //                         socket.emit(\"joined-room\", roomId);\n        //                     }\n        //                 }}\n        //             />\n        //             {roomId!==\"\"?\n        //                 <button className=\"join-room\"   \n        //                     onClick={()=>{\n        //                         setPlayerRole(2);\n        //                         socket.emit(\"joined-room\", roomId)\n        //                     }}>\n        //                 Join\n        //                 </button>\n        //             :console.log(\"Enter Room Id\")\n        //             }\n        //         </div>\n        //         {!roomFull?\n        //             <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n        //         :\n        //             <p className=\"room-full-statement\">Room is already full</p>\n        //         }\n        //     </div>:\n        //     <div className=\"rooms-main-container waiting-room-container\">\n        //         <div className=\"waiting-icon-container\">\n        //         </div>\n        //         <div className=\"room-id-container\" onClick={()=>{\n        //             idCopied();\n        //             navigator.clipboard.writeText(roomCode);\n        //             }\n        //         }>\n        //             <span>{roomCode}</span>\n        //         </div>\n        //         <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n        //     </div>}\n        //     <ToastContainer/>\n        // </> "]},"metadata":{},"sourceType":"module"}