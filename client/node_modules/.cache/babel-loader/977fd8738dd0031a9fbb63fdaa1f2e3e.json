{"ast":null,"code":"'use strict';\n\nfunction oldBrowser() {\n  throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11');\n}\n\nvar crypto = global.crypto || global.msCrypto;\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes;\n} else {\n  module.exports = oldBrowser;\n}\n\nfunction randomBytes(size, cb) {\n  // phantomjs needs to throw\n  if (size > 65536) throw new Error('requested too many random bytes'); // in case browserify  isn't using the Uint8Array version\n\n  var rawBytes = new global.Uint8Array(size); // This will not work in older browsers.\n  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n\n  if (size > 0) {\n    // getRandomValues fails on IE if size == 0\n    crypto.getRandomValues(rawBytes);\n  } // phantomjs doesn't like a buffer being passed here\n\n\n  var bytes = new Buffer(rawBytes.buffer);\n\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes);\n    });\n  }\n\n  return bytes;\n}","map":{"version":3,"sources":["/Users/priyanshumodi/Desktop/Code/React/dot/node_modules/randomstring/node_modules/randombytes/browser.js"],"names":["oldBrowser","Error","crypto","global","msCrypto","getRandomValues","module","exports","randomBytes","size","cb","rawBytes","Uint8Array","bytes","Buffer","buffer","process","nextTick"],"mappings":"AAAA;;AAEA,SAASA,UAAT,GAAuB;AACrB,QAAM,IAAIC,KAAJ,CAAU,4GAAV,CAAN;AACD;;AAED,IAAIC,MAAM,GAAGC,MAAM,CAACD,MAAP,IAAiBC,MAAM,CAACC,QAArC;;AAEA,IAAIF,MAAM,IAAIA,MAAM,CAACG,eAArB,EAAsC;AACpCC,EAAAA,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AACD,CAFD,MAEO;AACLF,EAAAA,MAAM,CAACC,OAAP,GAAiBP,UAAjB;AACD;;AAED,SAASQ,WAAT,CAAsBC,IAAtB,EAA4BC,EAA5B,EAAgC;AAC9B;AACA,MAAID,IAAI,GAAG,KAAX,EAAkB,MAAM,IAAIR,KAAJ,CAAU,iCAAV,CAAN,CAFY,CAG9B;;AACA,MAAIU,QAAQ,GAAG,IAAIR,MAAM,CAACS,UAAX,CAAsBH,IAAtB,CAAf,CAJ8B,CAM9B;AACA;;AACA,MAAIA,IAAI,GAAG,CAAX,EAAc;AAAG;AACfP,IAAAA,MAAM,CAACG,eAAP,CAAuBM,QAAvB;AACD,GAV6B,CAW9B;;;AACA,MAAIE,KAAK,GAAG,IAAIC,MAAJ,CAAWH,QAAQ,CAACI,MAApB,CAAZ;;AAEA,MAAI,OAAOL,EAAP,KAAc,UAAlB,EAA8B;AAC5B,WAAOM,OAAO,CAACC,QAAR,CAAiB,YAAY;AAClCP,MAAAA,EAAE,CAAC,IAAD,EAAOG,KAAP,CAAF;AACD,KAFM,CAAP;AAGD;;AAED,SAAOA,KAAP;AACD","sourcesContent":["'use strict'\n\nfunction oldBrowser () {\n  throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11')\n}\n\nvar crypto = global.crypto || global.msCrypto\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes\n} else {\n  module.exports = oldBrowser\n}\n\nfunction randomBytes (size, cb) {\n  // phantomjs needs to throw\n  if (size > 65536) throw new Error('requested too many random bytes')\n  // in case browserify  isn't using the Uint8Array version\n  var rawBytes = new global.Uint8Array(size)\n\n  // This will not work in older browsers.\n  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n  if (size > 0) {  // getRandomValues fails on IE if size == 0\n    crypto.getRandomValues(rawBytes)\n  }\n  // phantomjs doesn't like a buffer being passed here\n  var bytes = new Buffer(rawBytes.buffer)\n\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes)\n    })\n  }\n\n  return bytes\n}\n"]},"metadata":{},"sourceType":"script"}