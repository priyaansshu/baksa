{"ast":null,"code":"import _slicedToArray from\"/Users/priyanshumodi/Desktop/Code/React/dot/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState,useRef}from'react';import\"./style.css\";import{io}from\"socket.io-client\";import Game from\"./Game\";import Header from'./Components/Header';import{ToastContainer,toast}from'react-toastify';import'react-toastify/dist/ReactToastify.css';import{Route,Link,Routes,Navigate,useNavigate}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var socket=io('https://baksa19.herokuapp.com/',{transports:['websocket']});export default function(props){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),roomId=_useState2[0],setRoomId=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),shared=_useState4[0],setShared=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),joined=_useState6[0],setJoined=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),roomFull=_useState8[0],setRoomFull=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),playerRole=_useState10[0],setPlayerRole=_useState10[1];// playerRole=1 if he created the room, else 2 if he joined one\nvar _useState11=useState(),_useState12=_slicedToArray(_useState11,2),roomCode=_useState12[0],setRoomCode=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),roomDoesNotExist=_useState14[0],setRoomDoesNotExist=_useState14[1];var _useState15=useState(\"\"),_useState16=_slicedToArray(_useState15,2),hostGridSize=_useState16[0],setHostGridSize=_useState16[1];var history=useNavigate();var _useState17=useState(\"\"),_useState18=_slicedToArray(_useState17,2),urlRoomId=_useState18[0],setUrlRoomId=_useState18[1];// var urlRoomId;\nsocket.on(\"start-game\",function(tempUrlRoomId){if(playerRole==2){if(roomId[6]=='8'){setHostGridSize(8);}else{setHostGridSize(4);}}if(playerRole==1)toast.dismiss(roomCopiedToastId.current);setJoined(true);setUrlRoomId(tempUrlRoomId);});socket.off(\"room-full\").on(\"room-full\",function(){toast(\"Room is full\",{position:\"top-right\",autoClose:1000,hideProgressBar:true,closeOnClick:true,pauseOnHover:false,draggable:true,progress:undefined});console.log(\"room is full\");});socket.off('room-does-not-exist').on(\"room-does-not-exist\",function(){setRoomDoesNotExist(true);});useEffect(function(){if(roomDoesNotExist){console.log(\"here\");toast(\"Room does not exist\",{position:\"top-right\",autoClose:1000,hideProgressBar:true,closeOnClick:true,pauseOnHover:false,draggable:true,progress:undefined});console.log(\"Room does not exist\");setRoomDoesNotExist(false);}},[roomDoesNotExist]);var roomCopiedToastId=useRef(null);function idCopied(){if(roomCopiedToastId!=null){toast.dismiss(roomCopiedToastId.current);}roomCopiedToastId.current=toast(\"Room ID copied to clipboard\",{position:\"top-right\",autoClose:1000,hideProgressBar:true,closeOnClick:true,pauseOnHover:false,draggable:true,progress:undefined// transition: \"zoom\"\n});}var generateRandomString=function generateRandomString(myLength){var chars=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";var randomArray=Array.from({length:myLength},function(v,k){return chars[Math.floor(Math.random()*chars.length)];});var randomString=randomArray.join(\"\");return randomString;};useEffect(function(){if(urlRoomId!=\"\"){history(\"/room/\"+urlRoomId);}},[urlRoomId]);useEffect(function(){var curUrl=JSON.stringify(window.location.href);console.log(performance.getEntriesByType(\"navigation\")[0].type,curUrl.substring(curUrl.length-6,curUrl.length-1));if(curUrl.substring(curUrl.length-6,curUrl.length-1)!=\"room/\"&&curUrl.substring(curUrl.length-5,curUrl.length-1)!=\"room\"){history(\"/\");}},[]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{gridSize:props.gridSize}),!shared?/*#__PURE__*/_jsxs(\"div\",{className:\"rooms-main-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"create-room-container\",children:/*#__PURE__*/_jsx(\"button\",{className:\"create-room\",onClick:function onClick(){setHostGridSize(props.gridSize);idCopied();setShared(true);if(props.gridSize==8){var tempRoomCode=generateRandomString(6)+\"8\";}else{var tempRoomCode=generateRandomString(6);}setRoomCode(tempRoomCode);socket.emit(\"room-created\",tempRoomCode);setPlayerRole(1);navigator.clipboard.writeText(tempRoomCode);}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"join-room-container\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"room-input\",type:\"text\",style:roomId!==\"\"?{marginRight:\"10px\"}:{marginRight:\"0px\"},onChange:function onChange(e){setRoomId(e.target.value);},onKeyPress:function onKeyPress(e){if(e.key===\"Enter\"){setPlayerRole(2);socket.emit(\"joined-room\",roomId);}}}),roomId!==\"\"?/*#__PURE__*/_jsx(\"button\",{className:\"join-room\",onClick:function onClick(){setPlayerRole(2);socket.emit(\"joined-room\",roomId);},children:\"Join\"}):null]}),!roomFull?/*#__PURE__*/_jsx(\"p\",{className:\"room-id-statement\",children:\"Share Room ID with a friend or enter a Room ID to start the game\"}):/*#__PURE__*/_jsx(\"p\",{className:\"room-full-statement\",children:\"Room is already full\"})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"rooms-main-container waiting-room-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"waiting-icon-container\"}),/*#__PURE__*/_jsx(\"div\",{className:\"room-id-container\",onClick:function onClick(){idCopied();navigator.clipboard.writeText(roomCode);},children:/*#__PURE__*/_jsx(\"span\",{children:roomCode})}),/*#__PURE__*/_jsx(\"p\",{className:\"room-id-statement\",children:\"Waiting for the other player to join the room\"})]}),/*#__PURE__*/_jsx(ToastContainer,{})]})}),console.log(\"roomCode: \"+urlRoomId),/*#__PURE__*/_jsx(Route,{path:\"/\"+urlRoomId,element:/*#__PURE__*/_jsx(Game,{gridSize:hostGridSize,roomId:playerRole==1?roomCode:roomId,socketId:socket.id,playerRole:playerRole})})]})});}// {joined?\n//     <Route exact path={\"/\"+playerRole==1?roomCode:roomId} element={\n//         <Game gridSize={hostGridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>\n//     }/>\n//     :\n//     <Route exact path={\"/\"} element={\n//     <div>\n//         <Header gridSize={props.gridSize} fromMidGame={false}/>\n//         {!shared?\n//         <div className=\"rooms-main-container\">\n//             <div className=\"create-room-container\">\n//                 <button \n//                     className=\"create-room\" \n//                     onClick={()=>{\n//                         setHostGridSize(props.gridSize);\n//                         idCopied();\n//                         setShared(true);\n//                         if(props.gridSize==8){\n//                             var tempRoomCode = generateRandomString(6)+\"8\";\n//                         }\n//                         else{\n//                             var tempRoomCode = generateRandomString(6);\n//                         }\n//                         setRoomCode(tempRoomCode);\n//                         // console.log(tempRoomCode);\n//                         socket.emit(\"room-created\", tempRoomCode);\n//                         setPlayerRole(1)\n//                         navigator.clipboard.writeText(tempRoomCode)\n//                         }\n//                     }>    \n//                 </button>\n//             </div>\n//             <div className=\"join-room-container\">\n//                 <input \n//                     className=\"room-input\" \n//                     type=\"text\" \n//                     style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n//                     onChange={(e)=>{\n//                         setRoomId(e.target.value);\n//                     }} \n//                     onKeyPress={(e)=>{\n//                         if(e.key===\"Enter\"){\n//                             setPlayerRole(2)\n//                             socket.emit(\"joined-room\", roomId);\n//                         }\n//                     }}\n//                 />\n//                 {roomId!==\"\"?\n//                     <button className=\"join-room\"   \n//                         onClick={()=>{\n//                             setPlayerRole(2);\n//                             socket.emit(\"joined-room\", roomId)\n//                         }}>\n//                     Join\n//                     </button>\n//                 :console.log(\"Enter Room Id\")\n//                 }\n//             </div>\n//             {!roomFull?\n//                 <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n//             :\n//                 <p className=\"room-full-statement\">Room is already full</p>\n//             }\n//         </div>:\n//         <div className=\"rooms-main-container waiting-room-container\">\n//             <div className=\"waiting-icon-container\">\n//             </div>\n//             <div className=\"room-id-container\" onClick={()=>{\n//                 idCopied();\n//                 navigator.clipboard.writeText(roomCode);\n//                 }\n//             }>\n//                 <span>{roomCode}</span>\n//             </div>\n//             <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n//         </div>}\n//         <ToastContainer/>\n//     </div> }/>}","map":{"version":3,"sources":["/Users/priyanshumodi/Desktop/Code/React/dot/client/src/Room.js"],"names":["React","useEffect","useState","useRef","io","Game","Header","ToastContainer","toast","Route","Link","Routes","Navigate","useNavigate","socket","transports","props","roomId","setRoomId","shared","setShared","joined","setJoined","roomFull","setRoomFull","playerRole","setPlayerRole","roomCode","setRoomCode","roomDoesNotExist","setRoomDoesNotExist","hostGridSize","setHostGridSize","history","urlRoomId","setUrlRoomId","on","tempUrlRoomId","dismiss","roomCopiedToastId","current","off","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","console","log","idCopied","generateRandomString","myLength","chars","randomArray","Array","from","length","v","k","Math","floor","random","randomString","join","curUrl","JSON","stringify","window","location","href","performance","getEntriesByType","type","substring","gridSize","tempRoomCode","emit","navigator","clipboard","writeText","marginRight","e","target","value","key","id"],"mappings":"wIAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,CAAoCC,MAApC,KAAiD,OAAjD,CACA,MAAO,aAAP,CACA,OAAQC,EAAR,KAAiB,kBAAjB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,OAASC,cAAT,CAAyBC,KAAzB,KAAsC,gBAAtC,CACA,MAAO,uCAAP,CACA,OAAQC,KAAR,CAAeC,IAAf,CAAqBC,MAArB,CAA6BC,QAA7B,CAAuCC,WAAvC,KAAyD,kBAAzD,C,6IAEA,GAAMC,CAAAA,MAAM,CAAGV,EAAE,CAAC,gCAAD,CAAmC,CAAEW,UAAU,CAAG,CAAC,WAAD,CAAf,CAAnC,CAAjB,CAEA,cAAe,UAAUC,KAAV,CAAiB,CAC5B,cAA4Bd,QAAQ,CAAC,EAAD,CAApC,wCAAOe,MAAP,eAAeC,SAAf,eACA,eAA4BhB,QAAQ,CAAC,KAAD,CAApC,yCAAOiB,MAAP,eAAeC,SAAf,eACA,eAA4BlB,QAAQ,CAAC,KAAD,CAApC,yCAAOmB,MAAP,eAAeC,SAAf,eACA,eAAgCpB,QAAQ,CAAC,KAAD,CAAxC,yCAAOqB,QAAP,eAAiBC,WAAjB,eACA,eAAoCtB,QAAQ,EAA5C,0CAAOuB,UAAP,gBAAmBC,aAAnB,gBAAgD;AAChD,gBAAgCxB,QAAQ,EAAxC,2CAAOyB,QAAP,gBAAiBC,WAAjB,gBACA,gBAAgD1B,QAAQ,CAAC,KAAD,CAAxD,2CAAO2B,gBAAP,gBAAyBC,mBAAzB,gBACA,gBAAwC5B,QAAQ,CAAC,EAAD,CAAhD,2CAAO6B,YAAP,gBAAqBC,eAArB,gBACA,GAAMC,CAAAA,OAAO,CAAGpB,WAAW,EAA3B,CACA,gBAAkCX,QAAQ,CAAC,EAAD,CAA1C,2CAAOgC,SAAP,gBAAkBC,YAAlB,gBACA;AAEArB,MAAM,CAACsB,EAAP,CAAU,YAAV,CAAwB,SAACC,aAAD,CAAiB,CACrC,GAAGZ,UAAU,EAAE,CAAf,CAAiB,CACb,GAAGR,MAAM,CAAC,CAAD,CAAN,EAAW,GAAd,CAAkB,CACde,eAAe,CAAC,CAAD,CAAf,CACH,CAFD,IAGI,CACAA,eAAe,CAAC,CAAD,CAAf,CACH,CACJ,CACD,GAAGP,UAAU,EAAE,CAAf,CAAiBjB,KAAK,CAAC8B,OAAN,CAAcC,iBAAiB,CAACC,OAAhC,EACjBlB,SAAS,CAAC,IAAD,CAAT,CACAa,YAAY,CAACE,aAAD,CAAZ,CACH,CAZD,EAaAvB,MAAM,CAAC2B,GAAP,CAAW,WAAX,EAAwBL,EAAxB,CAA2B,WAA3B,CAAwC,UAAI,CACxC5B,KAAK,CAAC,cAAD,CAAiB,CAClBkC,QAAQ,CAAE,WADQ,CAElBC,SAAS,CAAE,IAFO,CAGlBC,eAAe,CAAE,IAHC,CAIlBC,YAAY,CAAE,IAJI,CAKlBC,YAAY,CAAE,KALI,CAMlBC,SAAS,CAAE,IANO,CAOlBC,QAAQ,CAAEC,SAPQ,CAAjB,CAAL,CASAC,OAAO,CAACC,GAAR,CAAY,cAAZ,EACH,CAXD,EAYArC,MAAM,CAAC2B,GAAP,CAAW,qBAAX,EAAkCL,EAAlC,CAAqC,qBAArC,CAA4D,UAAI,CAC5DN,mBAAmB,CAAC,IAAD,CAAnB,CACH,CAFD,EAIA7B,SAAS,CAAC,UAAI,CACV,GAAG4B,gBAAH,CAAoB,CAChBqB,OAAO,CAACC,GAAR,CAAY,MAAZ,EACA3C,KAAK,CAAC,qBAAD,CAAwB,CACzBkC,QAAQ,CAAE,WADe,CAEzBC,SAAS,CAAE,IAFc,CAGzBC,eAAe,CAAE,IAHQ,CAIzBC,YAAY,CAAE,IAJW,CAKzBC,YAAY,CAAE,KALW,CAMzBC,SAAS,CAAE,IANc,CAOzBC,QAAQ,CAAEC,SAPe,CAAxB,CAAL,CASAC,OAAO,CAACC,GAAR,CAAY,qBAAZ,EACArB,mBAAmB,CAAC,KAAD,CAAnB,CACH,CACJ,CAfQ,CAeN,CAACD,gBAAD,CAfM,CAAT,CAiBA,GAAMU,CAAAA,iBAAiB,CAAGpC,MAAM,CAAC,IAAD,CAAhC,CACA,QAASiD,CAAAA,QAAT,EAAoB,CAChB,GAAGb,iBAAiB,EAAE,IAAtB,CAA2B,CACvB/B,KAAK,CAAC8B,OAAN,CAAcC,iBAAiB,CAACC,OAAhC,EACH,CACDD,iBAAiB,CAACC,OAAlB,CAA4BhC,KAAK,CAAC,6BAAD,CAAgC,CAC7DkC,QAAQ,CAAE,WADmD,CAE7DC,SAAS,CAAE,IAFkD,CAG7DC,eAAe,CAAE,IAH4C,CAI7DC,YAAY,CAAE,IAJ+C,CAK7DC,YAAY,CAAE,KAL+C,CAM7DC,SAAS,CAAE,IANkD,CAO7DC,QAAQ,CAAEC,SACV;AAR6D,CAAhC,CAAjC,CAUH,CAED,GAAMI,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,QAAD,CAAc,CACvC,GAAMC,CAAAA,KAAK,CACT,4BADF,CAEA,GAAMC,CAAAA,WAAW,CAAGC,KAAK,CAACC,IAAN,CAClB,CAAEC,MAAM,CAAEL,QAAV,CADkB,CAElB,SAACM,CAAD,CAAIC,CAAJ,QAAUN,CAAAA,KAAK,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBT,KAAK,CAACI,MAAjC,CAAD,CAAf,EAFkB,CAApB,CAKA,GAAMM,CAAAA,YAAY,CAAGT,WAAW,CAACU,IAAZ,CAAiB,EAAjB,CAArB,CACA,MAAOD,CAAAA,YAAP,CACD,CAVH,CAYAhE,SAAS,CAAC,UAAI,CACV,GAAGiC,SAAS,EAAE,EAAd,CAAiB,CACbD,OAAO,CAAC,SAASC,SAAV,CAAP,CACH,CACJ,CAJQ,CAIN,CAACA,SAAD,CAJM,CAAT,CAMAjC,SAAS,CAAC,UAAI,CACV,GAAIkE,CAAAA,MAAM,CAAGC,IAAI,CAACC,SAAL,CAAeC,MAAM,CAACC,QAAP,CAAgBC,IAA/B,CAAb,CACAtB,OAAO,CAACC,GAAR,CAAYsB,WAAW,CAACC,gBAAZ,CAA6B,YAA7B,EAA2C,CAA3C,EAA8CC,IAA1D,CAAgER,MAAM,CAACS,SAAP,CAAiBT,MAAM,CAACR,MAAP,CAAc,CAA/B,CAAkCQ,MAAM,CAACR,MAAP,CAAc,CAAhD,CAAhE,EACA,GAAGQ,MAAM,CAACS,SAAP,CAAiBT,MAAM,CAACR,MAAP,CAAc,CAA/B,CAAkCQ,MAAM,CAACR,MAAP,CAAc,CAAhD,GAAoD,OAApD,EAA+DQ,MAAM,CAACS,SAAP,CAAiBT,MAAM,CAACR,MAAP,CAAc,CAA/B,CAAkCQ,MAAM,CAACR,MAAP,CAAc,CAAhD,GAAoD,MAAtH,CAA6H,CACzH1B,OAAO,CAAC,GAAD,CAAP,CACH,CACJ,CANQ,CAMN,EANM,CAAT,CAQA,mBACI,sCACI,MAAC,MAAD,yBACI,KAAC,KAAD,EAAO,IAAI,CAAG,GAAd,CAAkB,OAAO,cACrB,oCACI,KAAC,MAAD,EAAQ,QAAQ,CAAEjB,KAAK,CAAC6D,QAAxB,EADJ,CAEK,CAAC1D,MAAD,cACD,aAAK,SAAS,CAAC,sBAAf,wBAEQ,YAAK,SAAS,CAAC,uBAAf,uBACI,eACI,SAAS,CAAC,aADd,CAEI,OAAO,CAAE,kBAAI,CACTa,eAAe,CAAChB,KAAK,CAAC6D,QAAP,CAAf,CACAzB,QAAQ,GACRhC,SAAS,CAAC,IAAD,CAAT,CACA,GAAGJ,KAAK,CAAC6D,QAAN,EAAgB,CAAnB,CAAqB,CACjB,GAAIC,CAAAA,YAAY,CAAGzB,oBAAoB,CAAC,CAAD,CAApB,CAAwB,GAA3C,CACH,CAFD,IAGI,CACA,GAAIyB,CAAAA,YAAY,CAAGzB,oBAAoB,CAAC,CAAD,CAAvC,CACH,CACDzB,WAAW,CAACkD,YAAD,CAAX,CACAhE,MAAM,CAACiE,IAAP,CAAY,cAAZ,CAA4BD,YAA5B,EACApD,aAAa,CAAC,CAAD,CAAb,CACAsD,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BJ,YAA9B,EACC,CAhBT,EADJ,EAFR,cAyBQ,aAAK,SAAS,CAAC,qBAAf,wBACI,cACI,SAAS,CAAC,YADd,CAEI,IAAI,CAAC,MAFT,CAGI,KAAK,CAAE7D,MAAM,GAAG,EAAT,CAAY,CAACkE,WAAW,CAAE,MAAd,CAAZ,CAAkC,CAACA,WAAW,CAAC,KAAb,CAH7C,CAII,QAAQ,CAAE,kBAACC,CAAD,CAAK,CACXlE,SAAS,CAACkE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT,CACH,CANL,CAOI,UAAU,CAAE,oBAACF,CAAD,CAAK,CACb,GAAGA,CAAC,CAACG,GAAF,GAAQ,OAAX,CAAmB,CACf7D,aAAa,CAAC,CAAD,CAAb,CACAZ,MAAM,CAACiE,IAAP,CAAY,aAAZ,CAA2B9D,MAA3B,EACH,CACJ,CAZL,EADJ,CAeKA,MAAM,GAAG,EAAT,cACG,eAAQ,SAAS,CAAC,WAAlB,CACI,OAAO,CAAE,kBAAI,CACTS,aAAa,CAAC,CAAD,CAAb,CACAZ,MAAM,CAACiE,IAAP,CAAY,aAAZ,CAA2B9D,MAA3B,EACH,CAJL,kBADH,CAQA,IAvBL,GAzBR,CAoDK,CAACM,QAAD,cACG,UAAG,SAAS,CAAC,mBAAb,8EADH,cAGG,UAAG,SAAS,CAAC,qBAAb,kCAvDR,GADC,cA2DD,aAAK,SAAS,CAAC,6CAAf,wBACI,YAAK,SAAS,CAAC,wBAAf,EADJ,cAGI,YAAK,SAAS,CAAC,mBAAf,CAAmC,OAAO,CAAE,kBAAI,CAC5C6B,QAAQ,GACR4B,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BvD,QAA9B,EACC,CAHL,uBAKI,sBAAOA,QAAP,EALJ,EAHJ,cAUI,UAAG,SAAS,CAAC,mBAAb,2DAVJ,GA7DJ,cAyEI,KAAC,cAAD,IAzEJ,GADJ,EADJ,CA8EKuB,OAAO,CAACC,GAAR,CAAY,aAAajB,SAAzB,CA9EL,cA+EI,KAAC,KAAD,EAAO,IAAI,CAAI,IAAIA,SAAnB,CAA8B,OAAO,cAAI,KAAC,IAAD,EAAM,QAAQ,CAAEH,YAAhB,CAA8B,MAAM,CAAEN,UAAU,EAAE,CAAZ,CAAcE,QAAd,CAAuBV,MAA7D,CAAqE,QAAQ,CAAEH,MAAM,CAAC0E,EAAtF,CAA0F,UAAU,CAAE/D,UAAtG,EAAzC,EA/EJ,GADJ,EADJ,CAqFH,CAKO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\nimport \"./style.css\"\nimport {io} from \"socket.io-client\"\nimport Game from \"./Game\"\nimport Header from './Components/Header';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {Route, Link, Routes, Navigate, useNavigate} from \"react-router-dom\";\n\nconst socket = io('https://baksa19.herokuapp.com/', { transports : ['websocket'] });\n\nexport default function (props) {\n    const [roomId, setRoomId] = useState(\"\");\n    const [shared, setShared] = useState(false);\n    const [joined, setJoined] = useState(false)\n    const [roomFull, setRoomFull] = useState(false);\n    const [playerRole, setPlayerRole] = useState(); // playerRole=1 if he created the room, else 2 if he joined one\n    const [roomCode, setRoomCode] = useState();\n    const [roomDoesNotExist, setRoomDoesNotExist] = useState(false);\n    const [hostGridSize, setHostGridSize] = useState(\"\");\n    const history = useNavigate();\n    const [urlRoomId, setUrlRoomId] = useState(\"\");\n    // var urlRoomId;\n\n    socket.on(\"start-game\", (tempUrlRoomId)=>{\n        if(playerRole==2){\n            if(roomId[6]=='8'){\n                setHostGridSize(8);\n            }\n            else{\n                setHostGridSize(4);\n            }\n        }\n        if(playerRole==1)toast.dismiss(roomCopiedToastId.current);\n        setJoined(true);\n        setUrlRoomId(tempUrlRoomId);\n    })\n    socket.off(\"room-full\").on(\"room-full\", ()=>{\n        toast(\"Room is full\", {\n            position: \"top-right\",\n            autoClose: 1000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n        });\n        console.log(\"room is full\")\n    })\n    socket.off('room-does-not-exist').on(\"room-does-not-exist\", ()=>{\n        setRoomDoesNotExist(true);\n    })\n\n    useEffect(()=>{ \n        if(roomDoesNotExist){\n            console.log(\"here\");\n            toast(\"Room does not exist\", {\n                position: \"top-right\",\n                autoClose: 1000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: false,\n                draggable: true,\n                progress: undefined,\n            });\n            console.log(\"Room does not exist\");\n            setRoomDoesNotExist(false);\n        }\n    }, [roomDoesNotExist])\n\n    const roomCopiedToastId = useRef(null);\n    function idCopied (){\n        if(roomCopiedToastId!=null){\n            toast.dismiss(roomCopiedToastId.current);\n        }\n        roomCopiedToastId.current = toast(\"Room ID copied to clipboard\", {\n            position: \"top-right\",\n            autoClose: 1000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n            // transition: \"zoom\"\n        });  \n    } \n\n    const generateRandomString = (myLength) => {\n        const chars =\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        const randomArray = Array.from(\n          { length: myLength },\n          (v, k) => chars[Math.floor(Math.random() * chars.length)]\n        );\n      \n        const randomString = randomArray.join(\"\");\n        return randomString;\n      };\n\n    useEffect(()=>{\n        if(urlRoomId!=\"\"){\n            history(\"/room/\"+urlRoomId);\n        }\n    }, [urlRoomId])\n\n    useEffect(()=>{\n        var curUrl = JSON.stringify(window.location.href)\n        console.log(performance.getEntriesByType(\"navigation\")[0].type, curUrl.substring(curUrl.length-6, curUrl.length-1));\n        if(curUrl.substring(curUrl.length-6, curUrl.length-1)!=\"room/\" && curUrl.substring(curUrl.length-5, curUrl.length-1)!=\"room\"){\n            history(\"/\");\n        }\n    }, [])\n\n    return (\n        <>\n            <Routes>\n                <Route path = \"/\" element = {\n                    <div>\n                        <Header gridSize={props.gridSize}/>\n                        {!shared?\n                        <div className=\"rooms-main-container\">\n                            {/* <Link to={\"/\"+roomCode} style={{textDecoration: \"none\"}}> */}\n                                <div className=\"create-room-container\">\n                                    <button \n                                        className=\"create-room\" \n                                        onClick={()=>{\n                                            setHostGridSize(props.gridSize);\n                                            idCopied();\n                                            setShared(true);\n                                            if(props.gridSize==8){\n                                                var tempRoomCode = generateRandomString(6)+\"8\";\n                                            }\n                                            else{\n                                                var tempRoomCode = generateRandomString(6);\n                                            }\n                                            setRoomCode(tempRoomCode);\n                                            socket.emit(\"room-created\", tempRoomCode);\n                                            setPlayerRole(1)\n                                            navigator.clipboard.writeText(tempRoomCode)\n                                            }\n                                        }>    \n                                    </button>\n                                </div>\n                            {/* </Link> */}\n                            {/* <Link to={\"/\"+roomId} style={{textDecoration: \"none\"}}> */}\n                                <div className=\"join-room-container\">\n                                    <input \n                                        className=\"room-input\" \n                                        type=\"text\" \n                                        style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n                                        onChange={(e)=>{\n                                            setRoomId(e.target.value);\n                                        }} \n                                        onKeyPress={(e)=>{\n                                            if(e.key===\"Enter\"){\n                                                setPlayerRole(2)\n                                                socket.emit(\"joined-room\", roomId);\n                                            }\n                                        }}\n                                    />\n                                    {roomId!==\"\"?\n                                        <button className=\"join-room\"   \n                                            onClick={()=>{\n                                                setPlayerRole(2);\n                                                socket.emit(\"joined-room\", roomId)\n                                            }}>\n                                        Join\n                                        </button>\n                                    :null\n                                    }\n                                </div>\n                            {/* </Link> */}\n                            {!roomFull?\n                                <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n                            :\n                                <p className=\"room-full-statement\">Room is already full</p>\n                            }\n                        </div>:\n                        <div className=\"rooms-main-container waiting-room-container\">\n                            <div className=\"waiting-icon-container\">\n                            </div>\n                            <div className=\"room-id-container\" onClick={()=>{\n                                idCopied();\n                                navigator.clipboard.writeText(roomCode);\n                                }\n                            }>\n                                <span>{roomCode}</span>\n                            </div>\n                            <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n                        </div>}\n                        <ToastContainer/>\n                    </div>}\n                />\n                {console.log(\"roomCode: \"+urlRoomId)}\n                <Route path = {\"/\"+urlRoomId} element = {<Game gridSize={hostGridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>} />\n            </Routes>\n        </>\n  )\n}\n\n\n\n\n        // {joined?\n        //     <Route exact path={\"/\"+playerRole==1?roomCode:roomId} element={\n        //         <Game gridSize={hostGridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>\n        //     }/>\n        //     :\n        //     <Route exact path={\"/\"} element={\n        //     <div>\n        //         <Header gridSize={props.gridSize} fromMidGame={false}/>\n        //         {!shared?\n        //         <div className=\"rooms-main-container\">\n        //             <div className=\"create-room-container\">\n        //                 <button \n        //                     className=\"create-room\" \n        //                     onClick={()=>{\n        //                         setHostGridSize(props.gridSize);\n        //                         idCopied();\n        //                         setShared(true);\n        //                         if(props.gridSize==8){\n        //                             var tempRoomCode = generateRandomString(6)+\"8\";\n        //                         }\n        //                         else{\n        //                             var tempRoomCode = generateRandomString(6);\n        //                         }\n        //                         setRoomCode(tempRoomCode);\n        //                         // console.log(tempRoomCode);\n        //                         socket.emit(\"room-created\", tempRoomCode);\n        //                         setPlayerRole(1)\n        //                         navigator.clipboard.writeText(tempRoomCode)\n        //                         }\n        //                     }>    \n        //                 </button>\n        //             </div>\n        //             <div className=\"join-room-container\">\n        //                 <input \n        //                     className=\"room-input\" \n        //                     type=\"text\" \n        //                     style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n        //                     onChange={(e)=>{\n        //                         setRoomId(e.target.value);\n        //                     }} \n        //                     onKeyPress={(e)=>{\n        //                         if(e.key===\"Enter\"){\n        //                             setPlayerRole(2)\n        //                             socket.emit(\"joined-room\", roomId);\n        //                         }\n        //                     }}\n        //                 />\n        //                 {roomId!==\"\"?\n        //                     <button className=\"join-room\"   \n        //                         onClick={()=>{\n        //                             setPlayerRole(2);\n        //                             socket.emit(\"joined-room\", roomId)\n        //                         }}>\n        //                     Join\n        //                     </button>\n        //                 :console.log(\"Enter Room Id\")\n        //                 }\n        //             </div>\n        //             {!roomFull?\n        //                 <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n        //             :\n        //                 <p className=\"room-full-statement\">Room is already full</p>\n        //             }\n        //         </div>:\n        //         <div className=\"rooms-main-container waiting-room-container\">\n        //             <div className=\"waiting-icon-container\">\n        //             </div>\n        //             <div className=\"room-id-container\" onClick={()=>{\n        //                 idCopied();\n        //                 navigator.clipboard.writeText(roomCode);\n        //                 }\n        //             }>\n        //                 <span>{roomCode}</span>\n        //             </div>\n        //             <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n        //         </div>}\n        //         <ToastContainer/>\n        //     </div> }/>}"]},"metadata":{},"sourceType":"module"}