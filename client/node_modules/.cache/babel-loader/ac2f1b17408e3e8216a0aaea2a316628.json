{"ast":null,"code":"\"use strict\";\n\nvar randomBytes = require('randombytes');\n\nvar Charset = require('./charset.js');\n\nfunction safeRandomBytes(length) {\n  while (true) {\n    try {\n      return randomBytes(length);\n    } catch (e) {\n      continue;\n    }\n  }\n}\n\nfunction processString(buf, initialString, chars, reqLen, maxByte) {\n  var string = initialString;\n\n  for (var i = 0; i < buf.length && string.length < reqLen; i++) {\n    var randomByte = buf.readUInt8(i);\n\n    if (randomByte < maxByte) {\n      string += chars.charAt(randomByte % chars.length);\n    }\n  }\n\n  return string;\n}\n\nfunction getAsyncString(string, chars, length, maxByte, cb) {\n  randomBytes(length, function (err, buf) {\n    if (err) {\n      // Since it is waiting for entropy, errors are legit and we shouldn't just keep retrying\n      cb(err);\n    }\n\n    var generatedString = processString(buf, string, chars, length, maxByte);\n\n    if (generatedString.length < length) {\n      getAsyncString(generatedString, chars, length, maxByte, cb);\n    } else {\n      cb(null, generatedString);\n    }\n  });\n}\n\nexports.generate = function (options, cb) {\n  var charset = new Charset();\n  var length,\n      chars,\n      capitalization,\n      string = ''; // Handle options\n\n  if (typeof options === 'object') {\n    length = options.length || 32;\n\n    if (options.charset) {\n      charset.setType(options.charset);\n    } else {\n      charset.setType('alphanumeric');\n    }\n\n    if (options.capitalization) {\n      charset.setcapitalization(options.capitalization);\n    }\n\n    if (options.readable) {\n      charset.removeUnreadable();\n    }\n\n    charset.removeDuplicates();\n  } else if (typeof options === 'number') {\n    length = options;\n    charset.setType('alphanumeric');\n  } else {\n    length = 32;\n    charset.setType('alphanumeric');\n  } // Generate the string\n\n\n  var charsLen = charset.chars.length;\n  var maxByte = 256 - 256 % charsLen;\n\n  if (!cb) {\n    while (string.length < length) {\n      var buf = safeRandomBytes(Math.ceil(length * 256 / maxByte));\n      string = processString(buf, string, charset.chars, length, maxByte);\n    }\n\n    return string;\n  }\n\n  getAsyncString(string, charset.chars, length, maxByte, cb);\n};","map":{"version":3,"sources":["/Users/priyanshumodi/Desktop/Code/React/dot/node_modules/randomstring/lib/randomstring.js"],"names":["randomBytes","require","Charset","safeRandomBytes","length","e","processString","buf","initialString","chars","reqLen","maxByte","string","i","randomByte","readUInt8","charAt","getAsyncString","cb","err","generatedString","exports","generate","options","charset","capitalization","setType","setcapitalization","readable","removeUnreadable","removeDuplicates","charsLen","Math","ceil"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar randomBytes = require('randombytes');\nvar Charset = require('./charset.js');\n\nfunction safeRandomBytes(length) {\n  while (true) {\n    try {\n      return randomBytes(length);\n    } catch(e) {\n      continue;\n    }\n  }\n}\n\nfunction processString(buf, initialString, chars, reqLen, maxByte) {\n  var string = initialString;\n  for (var i = 0; i < buf.length && string.length < reqLen; i++) {\n    var randomByte = buf.readUInt8(i);\n    if (randomByte < maxByte) {\n      string += chars.charAt(randomByte % chars.length);\n    }\n  }\n  return string;\n}\n\nfunction getAsyncString(string, chars, length, maxByte, cb) {\n  randomBytes(length, function(err, buf) {\n    if (err) {\n      // Since it is waiting for entropy, errors are legit and we shouldn't just keep retrying\n      cb(err);\n    }\n    var generatedString = processString(buf, string, chars, length, maxByte);\n    if (generatedString.length < length) {\n      getAsyncString(generatedString, chars, length, maxByte, cb);\n    } else {\n      cb(null, generatedString);\n    }\n  })\n}\n\nexports.generate = function(options, cb) {\n  var charset = new Charset();\n\n  var length, chars, capitalization, string = '';\n\n  // Handle options\n  if (typeof options === 'object') {\n    length = options.length || 32;\n\n    if (options.charset) {\n      charset.setType(options.charset);\n    }\n    else {\n      charset.setType('alphanumeric');\n    }\n\n    if (options.capitalization) {\n      charset.setcapitalization(options.capitalization);\n    }\n\n    if (options.readable) {\n      charset.removeUnreadable();\n    }\n\n    charset.removeDuplicates();\n  }\n  else if (typeof options === 'number') {\n    length = options;\n    charset.setType('alphanumeric');\n  }\n  else {\n    length = 32;\n    charset.setType('alphanumeric');\n  }\n\n  // Generate the string\n  var charsLen = charset.chars.length;\n  var maxByte = 256 - (256 % charsLen);\n\n  if (!cb) {\n    while (string.length < length) {\n      var buf = safeRandomBytes(Math.ceil(length * 256 / maxByte));\n      string = processString(buf, string, charset.chars, length, maxByte);\n    }\n\n    return string;\n  }\n\n  getAsyncString(string, charset.chars, length, maxByte, cb);\n\n};\n"]},"metadata":{},"sourceType":"script"}