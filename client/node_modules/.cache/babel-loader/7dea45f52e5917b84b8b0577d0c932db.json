{"ast":null,"code":"var _jsxFileName = \"/Users/priyanshumodi/Desktop/Code/React/dot/client/src/Room.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport \"./style.css\";\nimport { io } from \"socket.io-client\";\nimport Game from \"./Game\";\nimport Header from './Components/Header';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Route, Link, Routes, Navigate, useNavigate } from \"react-router-dom\"; // const socket = io('https://baksa19.herokuapp.com/', { transports : ['websocket'] });\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:4000');\nexport default function (props) {\n  const [roomId, setRoomId] = useState(\"\");\n  const [shared, setShared] = useState(false);\n  const [joined, setJoined] = useState(false);\n  const [roomFull, setRoomFull] = useState(false);\n  const [playerRole, setPlayerRole] = useState(); // playerRole=1 if he created the room, else 2 if he joined one\n\n  const [roomCode, setRoomCode] = useState();\n  const [roomDoesNotExist, setRoomDoesNotExist] = useState(false);\n  const [hostGridSize, setHostGridSize] = useState(\"\");\n  const history = useNavigate();\n  const [urlRoomId, setUrlRoomId] = useState(\"\");\n  const [tempGameOverVariable, setTempGameOverVariable] = useState(false); // var urlRoomId;\n\n  socket.on(\"start-game\", tempUrlRoomId => {\n    if (playerRole == 2) {\n      if (roomId[6] == '8') {\n        setHostGridSize(8);\n      } else {\n        setHostGridSize(4);\n      }\n    }\n\n    if (playerRole == 1) toast.dismiss(roomCopiedToastId.current);\n    setJoined(true);\n    setUrlRoomId(tempUrlRoomId);\n  });\n  socket.off(\"room-full\").on(\"room-full\", () => {\n    toast(\"Room is full\", {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined\n    });\n    console.log(\"room is full\");\n  });\n  socket.off('room-does-not-exist').on(\"room-does-not-exist\", () => {\n    setRoomDoesNotExist(true);\n  });\n  useEffect(() => {\n    if (roomDoesNotExist) {\n      console.log(\"here\");\n      toast(\"Room does not exist\", {\n        position: \"top-right\",\n        autoClose: 1000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: true,\n        progress: undefined\n      });\n      console.log(\"Room does not exist\");\n      setRoomDoesNotExist(false);\n    }\n  }, [roomDoesNotExist]);\n  const roomCopiedToastId = useRef(null);\n\n  function idCopied() {\n    if (roomCopiedToastId != null) {\n      toast.dismiss(roomCopiedToastId.current);\n    }\n\n    roomCopiedToastId.current = toast(\"Room ID copied to clipboard\", {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined // transition: \"zoom\"\n\n    });\n  }\n\n  const generateRandomString = myLength => {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const randomArray = Array.from({\n      length: myLength\n    }, (v, k) => chars[Math.floor(Math.random() * chars.length)]);\n    const randomString = randomArray.join(\"\");\n    return randomString;\n  };\n\n  useEffect(() => {\n    if (urlRoomId != \"\") {\n      history(\"/room/\" + urlRoomId);\n    }\n  }, [urlRoomId]);\n  useEffect(() => {\n    var curUrl = JSON.stringify(window.location.href);\n    console.log(performance.getEntriesByType(\"navigation\")[0].type, curUrl.substring(curUrl.length - 6, curUrl.length - 1));\n\n    if (curUrl.substring(curUrl.length - 6, curUrl.length - 1) != \"room/\" && curUrl.substring(curUrl.length - 5, curUrl.length - 1) != \"room\") {\n      history(\"/\");\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            gridSize: props.gridSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), !shared ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rooms-main-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create-room-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"create-room\",\n                onClick: () => {\n                  setHostGridSize(props.gridSize);\n                  idCopied();\n                  setShared(true);\n\n                  if (props.gridSize == 8) {\n                    var tempRoomCode = generateRandomString(6) + \"8\";\n                  } else {\n                    var tempRoomCode = generateRandomString(6);\n                  }\n\n                  setRoomCode(tempRoomCode);\n                  socket.emit(\"room-created\", tempRoomCode);\n                  setPlayerRole(1);\n                  navigator.clipboard.writeText(tempRoomCode);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"join-room-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"room-input\",\n                type: \"text\",\n                style: roomId !== \"\" ? {\n                  marginRight: \"10px\"\n                } : {\n                  marginRight: \"0px\"\n                },\n                onChange: e => {\n                  setRoomId(e.target.value);\n                },\n                onKeyPress: e => {\n                  if (e.key === \"Enter\") {\n                    setPlayerRole(2);\n                    socket.emit(\"joined-room\", roomId);\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 37\n              }, this), roomId !== \"\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"join-room\",\n                onClick: () => {\n                  setPlayerRole(2);\n                  socket.emit(\"joined-room\", roomId);\n                },\n                children: \"Join\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 41\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 33\n            }, this), !roomFull ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"room-id-statement\",\n              children: \"Share Room ID with a friend or enter a Room ID to start the game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"room-full-statement\",\n              children: \"Room is already full\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rooms-main-container waiting-room-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon-container\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"room-id-container\",\n              onClick: () => {\n                idCopied();\n                navigator.clipboard.writeText(roomCode);\n              },\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: roomCode\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"room-id-statement\",\n              children: \"Waiting for the other player to join the room\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), console.log(\"roomCode: \" + urlRoomId), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\" + urlRoomId,\n        element: /*#__PURE__*/_jsxDEV(Game, {\n          gridSize: hostGridSize,\n          roomId: playerRole == 1 ? roomCode : roomId,\n          socketId: socket.id,\n          playerRole: playerRole,\n          tempGameOverVariable: tempGameOverVariable,\n          setTempGameOverVariable: setTempGameOverVariable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 58\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n} // {joined?\n//     <Route exact path={\"/\"+playerRole==1?roomCode:roomId} element={\n//         <Game gridSize={hostGridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>\n//     }/>\n//     :\n//     <Route exact path={\"/\"} element={\n//     <div>\n//         <Header gridSize={props.gridSize} fromMidGame={false}/>\n//         {!shared?\n//         <div className=\"rooms-main-container\">\n//             <div className=\"create-room-container\">\n//                 <button \n//                     className=\"create-room\" \n//                     onClick={()=>{\n//                         setHostGridSize(props.gridSize);\n//                         idCopied();\n//                         setShared(true);\n//                         if(props.gridSize==8){\n//                             var tempRoomCode = generateRandomString(6)+\"8\";\n//                         }\n//                         else{\n//                             var tempRoomCode = generateRandomString(6);\n//                         }\n//                         setRoomCode(tempRoomCode);\n//                         // console.log(tempRoomCode);\n//                         socket.emit(\"room-created\", tempRoomCode);\n//                         setPlayerRole(1)\n//                         navigator.clipboard.writeText(tempRoomCode)\n//                         }\n//                     }>    \n//                 </button>\n//             </div>\n//             <div className=\"join-room-container\">\n//                 <input \n//                     className=\"room-input\" \n//                     type=\"text\" \n//                     style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n//                     onChange={(e)=>{\n//                         setRoomId(e.target.value);\n//                     }} \n//                     onKeyPress={(e)=>{\n//                         if(e.key===\"Enter\"){\n//                             setPlayerRole(2)\n//                             socket.emit(\"joined-room\", roomId);\n//                         }\n//                     }}\n//                 />\n//                 {roomId!==\"\"?\n//                     <button className=\"join-room\"   \n//                         onClick={()=>{\n//                             setPlayerRole(2);\n//                             socket.emit(\"joined-room\", roomId)\n//                         }}>\n//                     Join\n//                     </button>\n//                 :console.log(\"Enter Room Id\")\n//                 }\n//             </div>\n//             {!roomFull?\n//                 <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n//             :\n//                 <p className=\"room-full-statement\">Room is already full</p>\n//             }\n//         </div>:\n//         <div className=\"rooms-main-container waiting-room-container\">\n//             <div className=\"waiting-icon-container\">\n//             </div>\n//             <div className=\"room-id-container\" onClick={()=>{\n//                 idCopied();\n//                 navigator.clipboard.writeText(roomCode);\n//                 }\n//             }>\n//                 <span>{roomCode}</span>\n//             </div>\n//             <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n//         </div>}\n//         <ToastContainer/>\n//     </div> }/>}","map":{"version":3,"sources":["/Users/priyanshumodi/Desktop/Code/React/dot/client/src/Room.js"],"names":["React","useEffect","useState","useRef","io","Game","Header","ToastContainer","toast","Route","Link","Routes","Navigate","useNavigate","socket","props","roomId","setRoomId","shared","setShared","joined","setJoined","roomFull","setRoomFull","playerRole","setPlayerRole","roomCode","setRoomCode","roomDoesNotExist","setRoomDoesNotExist","hostGridSize","setHostGridSize","history","urlRoomId","setUrlRoomId","tempGameOverVariable","setTempGameOverVariable","on","tempUrlRoomId","dismiss","roomCopiedToastId","current","off","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","console","log","idCopied","generateRandomString","myLength","chars","randomArray","Array","from","length","v","k","Math","floor","random","randomString","join","curUrl","JSON","stringify","window","location","href","performance","getEntriesByType","type","substring","gridSize","tempRoomCode","emit","navigator","clipboard","writeText","marginRight","e","target","value","key","id"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAO,aAAP;AACA,SAAQC,EAAR,QAAiB,kBAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;AACA,SAAQC,KAAR,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,WAAvC,QAAyD,kBAAzD,C,CAEA;;;;AACA,MAAMC,MAAM,GAAGV,EAAE,CAAC,uBAAD,CAAjB;AAEA,eAAe,UAAUW,KAAV,EAAiB;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,EAA5C,CAL4B,CAKoB;;AAChD,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,EAAxC;AACA,QAAM,CAAC0B,gBAAD,EAAmBC,mBAAnB,IAA0C3B,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC4B,YAAD,EAAeC,eAAf,IAAkC7B,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM8B,OAAO,GAAGnB,WAAW,EAA3B;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BhC,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACiC,oBAAD,EAAuBC,uBAAvB,IAAkDlC,QAAQ,CAAC,KAAD,CAAhE,CAX4B,CAY5B;;AAEAY,EAAAA,MAAM,CAACuB,EAAP,CAAU,YAAV,EAAyBC,aAAD,IAAiB;AACrC,QAAGd,UAAU,IAAE,CAAf,EAAiB;AACb,UAAGR,MAAM,CAAC,CAAD,CAAN,IAAW,GAAd,EAAkB;AACde,QAAAA,eAAe,CAAC,CAAD,CAAf;AACH,OAFD,MAGI;AACAA,QAAAA,eAAe,CAAC,CAAD,CAAf;AACH;AACJ;;AACD,QAAGP,UAAU,IAAE,CAAf,EAAiBhB,KAAK,CAAC+B,OAAN,CAAcC,iBAAiB,CAACC,OAAhC;AACjBpB,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAa,IAAAA,YAAY,CAACI,aAAD,CAAZ;AACH,GAZD;AAaAxB,EAAAA,MAAM,CAAC4B,GAAP,CAAW,WAAX,EAAwBL,EAAxB,CAA2B,WAA3B,EAAwC,MAAI;AACxC7B,IAAAA,KAAK,CAAC,cAAD,EAAiB;AAClBmC,MAAAA,QAAQ,EAAE,WADQ;AAElBC,MAAAA,SAAS,EAAE,IAFO;AAGlBC,MAAAA,eAAe,EAAE,IAHC;AAIlBC,MAAAA,YAAY,EAAE,IAJI;AAKlBC,MAAAA,YAAY,EAAE,KALI;AAMlBC,MAAAA,SAAS,EAAE,IANO;AAOlBC,MAAAA,QAAQ,EAAEC;AAPQ,KAAjB,CAAL;AASAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,GAXD;AAYAtC,EAAAA,MAAM,CAAC4B,GAAP,CAAW,qBAAX,EAAkCL,EAAlC,CAAqC,qBAArC,EAA4D,MAAI;AAC5DR,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,GAFD;AAIA5B,EAAAA,SAAS,CAAC,MAAI;AACV,QAAG2B,gBAAH,EAAoB;AAChBuB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA5C,MAAAA,KAAK,CAAC,qBAAD,EAAwB;AACzBmC,QAAAA,QAAQ,EAAE,WADe;AAEzBC,QAAAA,SAAS,EAAE,IAFc;AAGzBC,QAAAA,eAAe,EAAE,IAHQ;AAIzBC,QAAAA,YAAY,EAAE,IAJW;AAKzBC,QAAAA,YAAY,EAAE,KALW;AAMzBC,QAAAA,SAAS,EAAE,IANc;AAOzBC,QAAAA,QAAQ,EAAEC;AAPe,OAAxB,CAAL;AASAC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAvB,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH;AACJ,GAfQ,EAeN,CAACD,gBAAD,CAfM,CAAT;AAiBA,QAAMY,iBAAiB,GAAGrC,MAAM,CAAC,IAAD,CAAhC;;AACA,WAASkD,QAAT,GAAoB;AAChB,QAAGb,iBAAiB,IAAE,IAAtB,EAA2B;AACvBhC,MAAAA,KAAK,CAAC+B,OAAN,CAAcC,iBAAiB,CAACC,OAAhC;AACH;;AACDD,IAAAA,iBAAiB,CAACC,OAAlB,GAA4BjC,KAAK,CAAC,6BAAD,EAAgC;AAC7DmC,MAAAA,QAAQ,EAAE,WADmD;AAE7DC,MAAAA,SAAS,EAAE,IAFkD;AAG7DC,MAAAA,eAAe,EAAE,IAH4C;AAI7DC,MAAAA,YAAY,EAAE,IAJ+C;AAK7DC,MAAAA,YAAY,EAAE,KAL+C;AAM7DC,MAAAA,SAAS,EAAE,IANkD;AAO7DC,MAAAA,QAAQ,EAAEC,SAPmD,CAQ7D;;AAR6D,KAAhC,CAAjC;AAUH;;AAED,QAAMI,oBAAoB,GAAIC,QAAD,IAAc;AACvC,UAAMC,KAAK,GACT,4BADF;AAEA,UAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAClB;AAAEC,MAAAA,MAAM,EAAEL;AAAV,KADkB,EAElB,CAACM,CAAD,EAAIC,CAAJ,KAAUN,KAAK,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,KAAK,CAACI,MAAjC,CAAD,CAFG,CAApB;AAKA,UAAMM,YAAY,GAAGT,WAAW,CAACU,IAAZ,CAAiB,EAAjB,CAArB;AACA,WAAOD,YAAP;AACD,GAVH;;AAYAjE,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGgC,SAAS,IAAE,EAAd,EAAiB;AACbD,MAAAA,OAAO,CAAC,WAASC,SAAV,CAAP;AACH;AACJ,GAJQ,EAIN,CAACA,SAAD,CAJM,CAAT;AAMAhC,EAAAA,SAAS,CAAC,MAAI;AACV,QAAImE,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAeC,MAAM,CAACC,QAAP,CAAgBC,IAA/B,CAAb;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,WAAW,CAACC,gBAAZ,CAA6B,YAA7B,EAA2C,CAA3C,EAA8CC,IAA1D,EAAgER,MAAM,CAACS,SAAP,CAAiBT,MAAM,CAACR,MAAP,GAAc,CAA/B,EAAkCQ,MAAM,CAACR,MAAP,GAAc,CAAhD,CAAhE;;AACA,QAAGQ,MAAM,CAACS,SAAP,CAAiBT,MAAM,CAACR,MAAP,GAAc,CAA/B,EAAkCQ,MAAM,CAACR,MAAP,GAAc,CAAhD,KAAoD,OAApD,IAA+DQ,MAAM,CAACS,SAAP,CAAiBT,MAAM,CAACR,MAAP,GAAc,CAA/B,EAAkCQ,MAAM,CAACR,MAAP,GAAc,CAAhD,KAAoD,MAAtH,EAA6H;AACzH5B,MAAAA,OAAO,CAAC,GAAD,CAAP;AACH;AACJ,GANQ,EAMN,EANM,CAAT;AAQA,sBACI;AAAA,2BACI,QAAC,MAAD;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAG,GAAd;AAAkB,QAAA,OAAO,eACrB;AAAA,kCACI,QAAC,MAAD;AAAQ,YAAA,QAAQ,EAAEjB,KAAK,CAAC+D;AAAxB;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEK,CAAC5D,MAAD,gBACD;AAAK,YAAA,SAAS,EAAC,sBAAf;AAAA,oCAEQ;AAAK,cAAA,SAAS,EAAC,uBAAf;AAAA,qCACI;AACI,gBAAA,SAAS,EAAC,aADd;AAEI,gBAAA,OAAO,EAAE,MAAI;AACTa,kBAAAA,eAAe,CAAChB,KAAK,CAAC+D,QAAP,CAAf;AACAzB,kBAAAA,QAAQ;AACRlC,kBAAAA,SAAS,CAAC,IAAD,CAAT;;AACA,sBAAGJ,KAAK,CAAC+D,QAAN,IAAgB,CAAnB,EAAqB;AACjB,wBAAIC,YAAY,GAAGzB,oBAAoB,CAAC,CAAD,CAApB,GAAwB,GAA3C;AACH,mBAFD,MAGI;AACA,wBAAIyB,YAAY,GAAGzB,oBAAoB,CAAC,CAAD,CAAvC;AACH;;AACD3B,kBAAAA,WAAW,CAACoD,YAAD,CAAX;AACAjE,kBAAAA,MAAM,CAACkE,IAAP,CAAY,cAAZ,EAA4BD,YAA5B;AACAtD,kBAAAA,aAAa,CAAC,CAAD,CAAb;AACAwD,kBAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BJ,YAA9B;AACC;AAhBT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAFR,eAyBQ;AAAK,cAAA,SAAS,EAAC,qBAAf;AAAA,sCACI;AACI,gBAAA,SAAS,EAAC,YADd;AAEI,gBAAA,IAAI,EAAC,MAFT;AAGI,gBAAA,KAAK,EAAE/D,MAAM,KAAG,EAAT,GAAY;AAACoE,kBAAAA,WAAW,EAAE;AAAd,iBAAZ,GAAkC;AAACA,kBAAAA,WAAW,EAAC;AAAb,iBAH7C;AAII,gBAAA,QAAQ,EAAGC,CAAD,IAAK;AACXpE,kBAAAA,SAAS,CAACoE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACH,iBANL;AAOI,gBAAA,UAAU,EAAGF,CAAD,IAAK;AACb,sBAAGA,CAAC,CAACG,GAAF,KAAQ,OAAX,EAAmB;AACf/D,oBAAAA,aAAa,CAAC,CAAD,CAAb;AACAX,oBAAAA,MAAM,CAACkE,IAAP,CAAY,aAAZ,EAA2BhE,MAA3B;AACH;AACJ;AAZL;AAAA;AAAA;AAAA;AAAA,sBADJ,EAeKA,MAAM,KAAG,EAAT,gBACG;AAAQ,gBAAA,SAAS,EAAC,WAAlB;AACI,gBAAA,OAAO,EAAE,MAAI;AACTS,kBAAAA,aAAa,CAAC,CAAD,CAAb;AACAX,kBAAAA,MAAM,CAACkE,IAAP,CAAY,aAAZ,EAA2BhE,MAA3B;AACH,iBAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADH,GAQA,IAvBL;AAAA;AAAA;AAAA;AAAA;AAAA,oBAzBR,EAoDK,CAACM,QAAD,gBACG;AAAG,cAAA,SAAS,EAAC,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADH,gBAGG;AAAG,cAAA,SAAS,EAAC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAvDR;AAAA;AAAA;AAAA;AAAA;AAAA,kBADC,gBA2DD;AAAK,YAAA,SAAS,EAAC,6CAAf;AAAA,oCACI;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,oBADJ,eAGI;AAAK,cAAA,SAAS,EAAC,mBAAf;AAAmC,cAAA,OAAO,EAAE,MAAI;AAC5C+B,gBAAAA,QAAQ;AACR4B,gBAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BzD,QAA9B;AACC,eAHL;AAAA,qCAKI;AAAA,0BAAOA;AAAP;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAUI;AAAG,cAAA,SAAS,EAAC,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBA7DJ,eAyEI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,kBAzEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,EA8EKyB,OAAO,CAACC,GAAR,CAAY,eAAanB,SAAzB,CA9EL,eA+EI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAI,MAAIA,SAAnB;AAA8B,QAAA,OAAO,eAAI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAEH,YAAhB;AAA8B,UAAA,MAAM,EAAEN,UAAU,IAAE,CAAZ,GAAcE,QAAd,GAAuBV,MAA7D;AAAqE,UAAA,QAAQ,EAAEF,MAAM,CAAC2E,EAAtF;AAA0F,UAAA,UAAU,EAAEjE,UAAtG;AAAkH,UAAA,oBAAoB,EAAEW,oBAAxI;AAA8J,UAAA,uBAAuB,EAAEC;AAAvL;AAAA;AAAA;AAAA;AAAA;AAAzC;AAAA;AAAA;AAAA;AAAA,cA/EJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAqFH,C,CAKO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\nimport \"./style.css\"\nimport {io} from \"socket.io-client\"\nimport Game from \"./Game\"\nimport Header from './Components/Header';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {Route, Link, Routes, Navigate, useNavigate} from \"react-router-dom\";\n\n// const socket = io('https://baksa19.herokuapp.com/', { transports : ['websocket'] });\nconst socket = io('http://localhost:4000');\n\nexport default function (props) {\n    const [roomId, setRoomId] = useState(\"\");\n    const [shared, setShared] = useState(false);\n    const [joined, setJoined] = useState(false)\n    const [roomFull, setRoomFull] = useState(false);\n    const [playerRole, setPlayerRole] = useState(); // playerRole=1 if he created the room, else 2 if he joined one\n    const [roomCode, setRoomCode] = useState();\n    const [roomDoesNotExist, setRoomDoesNotExist] = useState(false);\n    const [hostGridSize, setHostGridSize] = useState(\"\");\n    const history = useNavigate();\n    const [urlRoomId, setUrlRoomId] = useState(\"\");\n    const [tempGameOverVariable, setTempGameOverVariable] = useState(false);\n    // var urlRoomId;\n\n    socket.on(\"start-game\", (tempUrlRoomId)=>{\n        if(playerRole==2){\n            if(roomId[6]=='8'){\n                setHostGridSize(8);\n            }\n            else{\n                setHostGridSize(4);\n            }\n        }\n        if(playerRole==1)toast.dismiss(roomCopiedToastId.current);\n        setJoined(true);\n        setUrlRoomId(tempUrlRoomId);\n    })\n    socket.off(\"room-full\").on(\"room-full\", ()=>{\n        toast(\"Room is full\", {\n            position: \"top-right\",\n            autoClose: 1000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n        });\n        console.log(\"room is full\")\n    })\n    socket.off('room-does-not-exist').on(\"room-does-not-exist\", ()=>{\n        setRoomDoesNotExist(true);\n    })\n\n    useEffect(()=>{ \n        if(roomDoesNotExist){\n            console.log(\"here\");\n            toast(\"Room does not exist\", {\n                position: \"top-right\",\n                autoClose: 1000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: false,\n                draggable: true,\n                progress: undefined,\n            });\n            console.log(\"Room does not exist\");\n            setRoomDoesNotExist(false);\n        }\n    }, [roomDoesNotExist])\n\n    const roomCopiedToastId = useRef(null);\n    function idCopied (){\n        if(roomCopiedToastId!=null){\n            toast.dismiss(roomCopiedToastId.current);\n        }\n        roomCopiedToastId.current = toast(\"Room ID copied to clipboard\", {\n            position: \"top-right\",\n            autoClose: 1000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n            // transition: \"zoom\"\n        });  \n    } \n\n    const generateRandomString = (myLength) => {\n        const chars =\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        const randomArray = Array.from(\n          { length: myLength },\n          (v, k) => chars[Math.floor(Math.random() * chars.length)]\n        );\n      \n        const randomString = randomArray.join(\"\");\n        return randomString;\n      };\n\n    useEffect(()=>{\n        if(urlRoomId!=\"\"){\n            history(\"/room/\"+urlRoomId);\n        }\n    }, [urlRoomId])\n\n    useEffect(()=>{\n        var curUrl = JSON.stringify(window.location.href)\n        console.log(performance.getEntriesByType(\"navigation\")[0].type, curUrl.substring(curUrl.length-6, curUrl.length-1));\n        if(curUrl.substring(curUrl.length-6, curUrl.length-1)!=\"room/\" && curUrl.substring(curUrl.length-5, curUrl.length-1)!=\"room\"){\n            history(\"/\");\n        }\n    }, [])\n\n    return (\n        <>\n            <Routes>\n                <Route path = \"/\" element = {\n                    <div>\n                        <Header gridSize={props.gridSize}/>\n                        {!shared?\n                        <div className=\"rooms-main-container\">\n                            {/* <Link to={\"/\"+roomCode} style={{textDecoration: \"none\"}}> */}\n                                <div className=\"create-room-container\">\n                                    <button \n                                        className=\"create-room\" \n                                        onClick={()=>{\n                                            setHostGridSize(props.gridSize);\n                                            idCopied();\n                                            setShared(true);\n                                            if(props.gridSize==8){\n                                                var tempRoomCode = generateRandomString(6)+\"8\";\n                                            }\n                                            else{\n                                                var tempRoomCode = generateRandomString(6);\n                                            }\n                                            setRoomCode(tempRoomCode);\n                                            socket.emit(\"room-created\", tempRoomCode);\n                                            setPlayerRole(1)\n                                            navigator.clipboard.writeText(tempRoomCode)\n                                            }\n                                        }>    \n                                    </button>\n                                </div>\n                            {/* </Link> */}\n                            {/* <Link to={\"/\"+roomId} style={{textDecoration: \"none\"}}> */}\n                                <div className=\"join-room-container\">\n                                    <input \n                                        className=\"room-input\" \n                                        type=\"text\" \n                                        style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n                                        onChange={(e)=>{\n                                            setRoomId(e.target.value);\n                                        }} \n                                        onKeyPress={(e)=>{\n                                            if(e.key===\"Enter\"){\n                                                setPlayerRole(2)\n                                                socket.emit(\"joined-room\", roomId);\n                                            }\n                                        }}\n                                    />\n                                    {roomId!==\"\"?\n                                        <button className=\"join-room\"   \n                                            onClick={()=>{\n                                                setPlayerRole(2);\n                                                socket.emit(\"joined-room\", roomId)\n                                            }}>\n                                        Join\n                                        </button>\n                                    :null\n                                    }\n                                </div>\n                            {/* </Link> */}\n                            {!roomFull?\n                                <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n                            :\n                                <p className=\"room-full-statement\">Room is already full</p>\n                            }\n                        </div>:\n                        <div className=\"rooms-main-container waiting-room-container\">\n                            <div className=\"waiting-icon-container\">\n                            </div>\n                            <div className=\"room-id-container\" onClick={()=>{\n                                idCopied();\n                                navigator.clipboard.writeText(roomCode);\n                                }\n                            }>\n                                <span>{roomCode}</span>\n                            </div>\n                            <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n                        </div>}\n                        <ToastContainer/>\n                    </div>}\n                />\n                {console.log(\"roomCode: \"+urlRoomId)}\n                <Route path = {\"/\"+urlRoomId} element = {<Game gridSize={hostGridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole} tempGameOverVariable={tempGameOverVariable} setTempGameOverVariable={setTempGameOverVariable}/>} />\n            </Routes>\n        </>\n  )\n}\n\n\n\n\n        // {joined?\n        //     <Route exact path={\"/\"+playerRole==1?roomCode:roomId} element={\n        //         <Game gridSize={hostGridSize} roomId={playerRole==1?roomCode:roomId} socketId={socket.id} playerRole={playerRole}/>\n        //     }/>\n        //     :\n        //     <Route exact path={\"/\"} element={\n        //     <div>\n        //         <Header gridSize={props.gridSize} fromMidGame={false}/>\n        //         {!shared?\n        //         <div className=\"rooms-main-container\">\n        //             <div className=\"create-room-container\">\n        //                 <button \n        //                     className=\"create-room\" \n        //                     onClick={()=>{\n        //                         setHostGridSize(props.gridSize);\n        //                         idCopied();\n        //                         setShared(true);\n        //                         if(props.gridSize==8){\n        //                             var tempRoomCode = generateRandomString(6)+\"8\";\n        //                         }\n        //                         else{\n        //                             var tempRoomCode = generateRandomString(6);\n        //                         }\n        //                         setRoomCode(tempRoomCode);\n        //                         // console.log(tempRoomCode);\n        //                         socket.emit(\"room-created\", tempRoomCode);\n        //                         setPlayerRole(1)\n        //                         navigator.clipboard.writeText(tempRoomCode)\n        //                         }\n        //                     }>    \n        //                 </button>\n        //             </div>\n        //             <div className=\"join-room-container\">\n        //                 <input \n        //                     className=\"room-input\" \n        //                     type=\"text\" \n        //                     style={roomId!==\"\"?{marginRight: \"10px\"}:{marginRight:\"0px\"}}\n        //                     onChange={(e)=>{\n        //                         setRoomId(e.target.value);\n        //                     }} \n        //                     onKeyPress={(e)=>{\n        //                         if(e.key===\"Enter\"){\n        //                             setPlayerRole(2)\n        //                             socket.emit(\"joined-room\", roomId);\n        //                         }\n        //                     }}\n        //                 />\n        //                 {roomId!==\"\"?\n        //                     <button className=\"join-room\"   \n        //                         onClick={()=>{\n        //                             setPlayerRole(2);\n        //                             socket.emit(\"joined-room\", roomId)\n        //                         }}>\n        //                     Join\n        //                     </button>\n        //                 :console.log(\"Enter Room Id\")\n        //                 }\n        //             </div>\n        //             {!roomFull?\n        //                 <p className=\"room-id-statement\">Share Room ID with a friend or enter a Room ID to start the game</p>\n        //             :\n        //                 <p className=\"room-full-statement\">Room is already full</p>\n        //             }\n        //         </div>:\n        //         <div className=\"rooms-main-container waiting-room-container\">\n        //             <div className=\"waiting-icon-container\">\n        //             </div>\n        //             <div className=\"room-id-container\" onClick={()=>{\n        //                 idCopied();\n        //                 navigator.clipboard.writeText(roomCode);\n        //                 }\n        //             }>\n        //                 <span>{roomCode}</span>\n        //             </div>\n        //             <p className=\"room-id-statement\">Waiting for the other player to join the room</p>\n        //         </div>}\n        //         <ToastContainer/>\n        //     </div> }/>}"]},"metadata":{},"sourceType":"module"}